This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-16T14:05:56.138Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
app/dashboard/forms/[id]/edit/page.tsx
app/dashboard/forms/[id]/preview/page.tsx
app/dashboard/forms/[id]/summary/page.tsx
app/dashboard/forms/new/page.tsx
app/dashboard/forms/page.tsx
app/dashboard/layout.tsx
app/dashboard/page.tsx
app/dashboard/settings/page.tsx
app/forms/[id]/edit/page.tsx
app/forms/[id]/preview/page.tsx
app/forms/[id]/summary/page.tsx
app/forms/new/page.tsx
app/forms/page.tsx
app/globals.css
app/layout.tsx
app/page.tsx
app/summary/dashboard-style.tsx
app/summary/page.tsx
app/summary/timeline-style.tsx
app/test/components.tsx
app/test/page.tsx
components.json
components/dashboard/DashboardMetrics.tsx
components/dashboard/Forms/FormEditor.tsx
components/dashboard/Forms/FormList.tsx
components/dashboard/Forms/RecentForms.tsx
components/MedicalQuestionnaire/MedicalQuestionnaire.tsx
components/MedicalQuestionnaire/QuestionTypes.tsx
components/summary/AvailableItemsPanel.tsx
components/summary/items/SummaryItems.tsx
components/summary/SummaryLayoutEditor.tsx
components/ui/accordion.tsx
components/ui/alert-dialog.tsx
components/ui/alert.tsx
components/ui/aspect-ratio.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/breadcrumb.tsx
components/ui/button.tsx
components/ui/calendar.tsx
components/ui/card.tsx
components/ui/carousel.tsx
components/ui/chart.tsx
components/ui/checkbox.tsx
components/ui/collapsible.tsx
components/ui/command.tsx
components/ui/context-menu.tsx
components/ui/dialog.tsx
components/ui/drawer.tsx
components/ui/dropdown-menu.tsx
components/ui/form.tsx
components/ui/hover-card.tsx
components/ui/input-otp.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/menubar.tsx
components/ui/navigation-menu.tsx
components/ui/pagination.tsx
components/ui/popover.tsx
components/ui/progress.tsx
components/ui/radio-group.tsx
components/ui/resizable.tsx
components/ui/scroll-area.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sheet.tsx
components/ui/sidebar.tsx
components/ui/skeleton.tsx
components/ui/slider.tsx
components/ui/sonner.tsx
components/ui/switch.tsx
components/ui/table.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
components/ui/toast.tsx
components/ui/toaster.tsx
components/ui/toggle-group.tsx
components/ui/toggle.tsx
components/ui/tooltip.tsx
hooks/use-mobile.tsx
hooks/use-toast.ts
hooks/useFormLists.tsx
lib/utils.ts
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
	"extends": ["next/core-web-vitals", "next/typescript"],
	"rules": {
		"react/no-unescaped-entities": "off",
		"@next/next/no-page-custom-font": "off",
		"@typescript-eslint/no-unused-vars": "off",
		"@typescript-eslint/no-explicit-any": "off"
	}
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/dashboard/forms/[id]/edit/page.tsx
================
export default function EditFormPage({ params }: { params: { id: string } }) {
  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight mb-8">Edit Form</h1>
      {/* MedicalQuestionnaire component with form data */}
    </div>
  );
}

================
File: app/dashboard/forms/[id]/preview/page.tsx
================
export default function PreviewFormPage({
  params,
}: {
  params: { id: string };
}) {
  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight mb-8">Preview Form</h1>
      {/* FormPreview component */}
    </div>
  );
}

================
File: app/dashboard/forms/[id]/summary/page.tsx
================
// src/app/(dashboard)/forms/[id]/summary/page.tsx
"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { SummaryLayoutEditor } from "@/components/summary/SummaryLayoutEditor";
import {
  STYLE_PRESETS,
  getDummyValue,
} from "@/components/summary/items/SummaryItems";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useFormList } from "@/hooks/useFormLists";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

interface Props {
  params: {
    id: string;
  };
  searchParams: {
    data?: string;
  };
}

export default function SummaryPage({ params, searchParams }: Props) {
  const { getFormById } = useFormList();
  const [formData, setFormData] = useState<any>(null);
  const [stylePreset, setStylePreset] = useState("default");
  const [layout, setLayout] = useState<any[]>([]);

  // Load form and response data
  useEffect(() => {
    const form = getFormById(params.id);
    if (form) {
      // Parse form response data from URL if present
      const responseData = searchParams.data
        ? JSON.parse(decodeURIComponent(searchParams.data))
        : generateDummyResponses(form);

      setFormData({
        form,
        responses: responseData,
      });
    }
  }, [params.id, searchParams.data, getFormById]);

  // Generate dummy responses for preview
  const generateDummyResponses = (form: any) => {
    const responses: Record<string, any> = {};
    form.steps.forEach((step: any) => {
      step.questions.forEach((question: any) => {
        responses[question.id] = getDummyValue(question.type);
      });
    });
    return responses;
  };

  const handleLayoutChange = (newLayout: any) => {
    setLayout(newLayout);
  };

  const handleStyleChange = (style: string) => {
    setStylePreset(style);
  };

  if (!formData) return null;

  return (
    <div className="space-y-8 p-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight mb-2">
            {formData.form.title} - Summary
          </h1>
          <p className="text-muted-foreground">
            Customize how your form responses are displayed
          </p>
        </div>
        <div className="flex items-center space-x-4">
          <Select value={stylePreset} onValueChange={handleStyleChange}>
            <SelectTrigger className="w-[150px]">
              <SelectValue placeholder="Select style" />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(STYLE_PRESETS).map(([key, preset]) => (
                <SelectItem key={key} value={key}>
                  {preset.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button>Save Layout</Button>
          <Button>Export PDF</Button>
        </div>
      </div>

      <div className="grid grid-cols-6 gap-6">
        {/* Layout Editor */}
        <div className="col-span-4 space-y-4">
          <SummaryLayoutEditor
            formData={formData}
            onLayoutChange={handleLayoutChange}
          />
        </div>

        {/* Available Items Panel */}
        <div className="col-span-2">
          <div className="sticky top-4 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Available Items</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {formData.form.steps.map((step: any) => (
                    <div key={step.title} className="space-y-2">
                      <h3 className="font-semibold text-sm text-muted-foreground">
                        {step.title}
                      </h3>
                      <div className="space-y-2">
                        {step.questions.map((question: any) => (
                          <div
                            key={question.id}
                            className="p-2 bg-secondary rounded-md cursor-move"
                            draggable
                          >
                            <p className="text-sm font-medium">
                              {question.title}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {formData.responses[question.id]}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Preview Modal */}
      <Dialog>
        <DialogTrigger asChild>
          <Button variant="outline">Preview Summary</Button>
        </DialogTrigger>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Summary Preview</DialogTitle>
          </DialogHeader>
          <div className="p-4">
            {layout.map((section) => (
              <div key={section.id} className="mb-6">
                <h2 className="text-xl font-semibold mb-4">{section.title}</h2>
                <div className={`grid grid-cols-${section.columns} gap-4`}>
                  {section.items.map((item: any) => (
                    <div
                      key={item.id}
                      className={
                        STYLE_PRESETS[stylePreset as keyof typeof STYLE_PRESETS]
                          .styles[item.type].className
                      }
                    >
                      <h3 className="font-medium">{item.title}</h3>
                      <p>{formData.responses[item.id]}</p>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

// Helper component for section headings
function SectionHeading({ title }: { title: string }) {
  return (
    <div className="flex items-center gap-2 my-4">
      <div className="h-px flex-1 bg-border" />
      <h3 className="text-sm font-medium text-muted-foreground">{title}</h3>
      <div className="h-px flex-1 bg-border" />
    </div>
  );
}

================
File: app/dashboard/forms/new/page.tsx
================
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { ArrowLeft } from "lucide-react";

export default function NewFormPage() {
  return <div>{/* MedicalQuestionnaire component */}</div>;
}

================
File: app/dashboard/forms/page.tsx
================
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";
import { FormList } from "@/components/dashboard/Forms/FormList";

export default function FormsPage() {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight">Forms</h1>
        <Button asChild>
          <Link href="/forms/new">
            <Plus className="mr-2 h-4 w-4" />
            Create New Form
          </Link>
        </Button>
      </div>

      <FormList />
    </div>
  );
}

================
File: app/dashboard/layout.tsx
================
// import { DashboardNav } from "@/components/dashboard/Navigation/DashboardNav";
// import { DashboardHeader } from "@/components/dashboard/Navigation/DashboardHeader";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen">
      {/* <DashboardHeader /> */}
      <div className="flex h-screen overflow-hidden">
        {/* <DashboardNav /> */}
        <main className="flex-1 overflow-y-auto pt-16 pb-8 md:pt-4 px-4 md:px-8">
          <div className="h-full max-w-6xl mx-auto">{children}</div>
        </main>
      </div>
    </div>
  );
}

================
File: app/dashboard/page.tsx
================
"use client";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";
import { RecentForms } from "@/components/dashboard/Forms/RecentForms";
import DashboardMetrics from "@/components/dashboard/DashboardMetrics";

export default function DashboardPage() {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
        <Button asChild>
          <Link href="/forms/new">
            <Plus className="mr-2 h-4 w-4" />
            Create New Form
          </Link>
        </Button>
      </div>

      <DashboardMetrics />
      <RecentForms />
    </div>
  );
}

================
File: app/dashboard/settings/page.tsx
================
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";

export default function SettingsPage() {
  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
        <p className="text-muted-foreground mt-2">
          Manage your account settings and preferences.
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Notifications</CardTitle>
          <CardDescription>
            Configure how you want to receive notifications.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>Email Notifications</Label>
              <p className="text-sm text-muted-foreground">
                Receive email notifications when a form is submitted.
              </p>
            </div>
            <Switch />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Default Form Settings</CardTitle>
          <CardDescription>
            Configure default settings for new forms.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label>Auto-save</Label>
              <p className="text-sm text-muted-foreground">
                Automatically save form drafts while editing.
              </p>
            </div>
            <Switch defaultChecked />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/forms/[id]/edit/page.tsx
================
import FormEditor from "@/components/dashboard/Forms/FormEditor";

export default function EditFormPage({ params }: { params: { id: string } }) {
  return (
    <div>
      <FormEditor formId={params.id}></FormEditor>
    </div>
  );
}

================
File: app/forms/[id]/preview/page.tsx
================
export default function PreviewFormPage({
  params,
}: {
  params: { id: string };
}) {
  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight mb-8">Preview Form</h1>
      {/* FormPreview component */}
    </div>
  );
}

================
File: app/forms/[id]/summary/page.tsx
================
// src/app/(dashboard)/forms/[id]/summary/page.tsx
"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { SummaryLayoutEditor } from "@/components/summary/SummaryLayoutEditor";
import {
  STYLE_PRESETS,
  getDummyValue,
} from "@/components/summary/items/SummaryItems";
import { DragDropContext } from "@hello-pangea/dnd";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useFormList } from "@/hooks/useFormLists";

interface Props {
  params: {
    id: string;
  };
  searchParams: {
    data?: string;
  };
}

export default function SummaryPage({ params, searchParams }: Props) {
  const { getFormById } = useFormList();
  const [formData, setFormData] = useState<any>(null);
  const [stylePreset, setStylePreset] = useState("default");
  const [layout, setLayout] = useState<any[]>([]);

  // Load form and response data
  useEffect(() => {
    const form = getFormById(params.id);
    if (form) {
      // Parse form response data from URL if present
      const responseData = searchParams.data
        ? JSON.parse(decodeURIComponent(searchParams.data))
        : generateDummyResponses(form);

      setFormData({
        form,
        responses: responseData,
      });
    }
  }, [params.id, searchParams.data, getFormById]);

  // Generate dummy responses for preview
  const generateDummyResponses = (form: any) => {
    const responses: Record<string, any> = {};
    form.steps.forEach((step: any) => {
      step.questions.forEach((question: any) => {
        responses[question.id] = getDummyValue(question.type);
      });
    });
    return responses;
  };

  const handleLayoutChange = (newLayout: any) => {
    setLayout(newLayout);
  };

  const handleStyleChange = (style: string) => {
    setStylePreset(style);
  };

  const handleDragEnd = (result: any) => {
    // This will be handled by the SummaryLayoutEditor component
  };

  if (!formData) return null;

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <div className="space-y-8 p-8">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold tracking-tight mb-2">
              {formData.form.title} - Summary
            </h1>
            <p className="text-muted-foreground">
              Customize how your form responses are displayed
            </p>
          </div>
          <div className="flex items-center space-x-4">
            <Select value={stylePreset} onValueChange={handleStyleChange}>
              <SelectTrigger className="w-[150px]">
                <SelectValue placeholder="Select style" />
              </SelectTrigger>
              <SelectContent>
                {Object.entries(STYLE_PRESETS).map(([key, preset]) => (
                  <SelectItem key={key} value={key}>
                    {preset.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button>Save Layout</Button>
            <Button>Export PDF</Button>
          </div>
        </div>

        <div className="grid grid-cols-6 gap-6">
          {/* Layout Editor */}
          <div className="col-span-6 space-y-4">
            <SummaryLayoutEditor
              formData={formData}
              onLayoutChange={handleLayoutChange}
            />
          </div>
        </div>

        {/* Preview Dialog */}
        <Dialog>
          <DialogTrigger asChild>
            <Button variant="outline">Preview Summary</Button>
          </DialogTrigger>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>Summary Preview</DialogTitle>
            </DialogHeader>
            <div className="p-4">
              {layout.map((section) => (
                <div key={section.id} className="mb-6">
                  <h2 className="text-xl font-semibold mb-4">
                    {section.title}
                  </h2>
                  <div className={`grid grid-cols-${section.columns} gap-4`}>
                    {section.items.map((item: any) => (
                      <div
                        key={item.id}
                        className={
                          STYLE_PRESETS[
                            stylePreset as keyof typeof STYLE_PRESETS
                          ].styles[item.type].className
                        }
                      >
                        <h3 className="font-medium">{item.title}</h3>
                        <p>{formData.responses[item.questionId]}</p>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </DragDropContext>
  );
}

================
File: app/forms/new/page.tsx
================
"use client";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { ArrowLeft } from "lucide-react";
import { MedicalQuestionnaire } from "@/components/MedicalQuestionnaire/MedicalQuestionnaire";
import { Form } from "react-hook-form";
import FormEditor from "@/components/dashboard/Forms/FormEditor";

export default function NewFormPage() {
  return (
    <div>
      <FormEditor />
    </div>
  );
}

================
File: app/forms/page.tsx
================
"use client";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";
import { FormList } from "@/components/dashboard/Forms/FormList";
import { Toaster } from "@/components/ui/toaster";

export default function FormsPage() {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight">Forms</h1>
        <Button asChild>
          <Link href="/forms/new">
            <Plus className="mr-2 h-4 w-4" />
            Create New Form
          </Link>
        </Button>
      </div>

      <FormList />
    </div>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { Toaster } from "@/components/ui/toaster";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
        <Toaster />
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
"use client";

import * as React from "react";

export default function HomePage() {
  return <MedicalQuestionnaire />;
}

================
File: app/summary/dashboard-style.tsx
================
"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  CheckCircle2,
  XCircle,
  HelpCircle,
  Activity,
  Thermometer,
  Droplet,
  Pill,
  Stethoscope,
  User,
  FileText,
} from "lucide-react";

// ... (keep the existing interfaces)

export default function SummaryPage() {
  const [formData, setFormData] = useState<CustomFormData>({
    // ... (keep the existing form data)
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900 p-8">
      <div className="max-w-7xl mx-auto space-y-8">
        <header className="text-center space-y-2">
          <h1 className="text-4xl font-bold text-blue-900 dark:text-blue-100">
            {formData.header.title}
          </h1>
          <p className="text-xl text-blue-700 dark:text-blue-300">
            {formData.header.subtitle1}
          </p>
          <p className="text-lg text-blue-600 dark:text-blue-400">
            {formData.header.subtitle2}
          </p>
        </header>

        <Tabs defaultValue="patient-info" className="w-full">
          <TabsList className="grid w-full grid-cols-3 lg:grid-cols-6">
            <TabsTrigger value="patient-info">Paciente</TabsTrigger>
            <TabsTrigger value="questionnaire">Cuestionario</TabsTrigger>
            <TabsTrigger value="physical-exam">Examen Físico</TabsTrigger>
            <TabsTrigger value="lab-results">Laboratorio</TabsTrigger>
            <TabsTrigger value="ecg">ECG</TabsTrigger>
            <TabsTrigger value="consent">Consentimiento</TabsTrigger>
          </TabsList>
          <TabsContent value="patient-info">
            <PatientInfoCard patientInfo={formData.patientInfo} />
          </TabsContent>
          <TabsContent value="questionnaire">
            <QuestionnaireCard questions={formData.questions} />
          </TabsContent>
          <TabsContent value="physical-exam">
            <PhysicalExamCard physicalExam={formData.physicalExam} />
          </TabsContent>
          <TabsContent value="lab-results">
            <LabResultsCard labResults={formData.labResults} />
          </TabsContent>
          <TabsContent value="ecg">
            <ECGCard ecg={formData.ecg} />
          </TabsContent>
          <TabsContent value="consent">
            <ConsentCard consentText={formData.consentText} />
          </TabsContent>
        </Tabs>

        <div className="flex justify-between">
          <Button variant="outline">Editar</Button>
          <Button>Imprimir</Button>
        </div>

        <footer className="text-center text-sm text-gray-600 dark:text-gray-400 mt-4">
          <p>
            Este documento es confidencial y destinado únicamente para uso
            médico.
          </p>
          <p>
            Generado el {new Date().toLocaleDateString()} a las{" "}
            {new Date().toLocaleTimeString()}
          </p>
        </footer>
      </div>
    </div>
  );
}

function PatientInfoCard({ patientInfo }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <User className="w-6 h-6 mr-2" />
          Información del Paciente
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <InfoItem label="Nombre" value={patientInfo.name} />
          <InfoItem label="Edad" value={patientInfo.age} />
          <InfoItem label="Peso" value={`${patientInfo.weight} kg`} />
          <InfoItem label="Habitación" value={patientInfo.room} />
        </div>
      </CardContent>
    </Card>
  );
}

function QuestionnaireCard({ questions }) {
  const answeredQuestions = questions.filter((q) => q.answer !== null).length;
  const progress = (answeredQuestions / questions.length) * 100;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <FileText className="w-6 h-6 mr-2" />
          Cuestionario Médico
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="mb-4">
          <Progress value={progress} className="w-full" />
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
            {answeredQuestions} de {questions.length} preguntas respondidas
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {questions.map((q, index) => (
            <QuestionItem key={index} question={q.question} answer={q.answer} />
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

function PhysicalExamCard({ physicalExam }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Activity className="w-6 h-6 mr-2" />
          Examen Físico
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <InfoItem label="Apertura Bucal" value={physicalExam.mouthOpening} />
          <InfoItem
            label="Mallampati"
            value={physicalExam.mallampati.toString()}
          />
          <InfoItem
            label="Movilidad Cervical"
            value={physicalExam.cervicalMobility}
          />
          <InfoItem
            label="Distancia Tiromentoniana"
            value={physicalExam.thyromentalDistance}
          />
          <InfoItem label="Venas Yugulares" value={physicalExam.jugularVeins} />
          <InfoItem label="Acceso Venoso" value={physicalExam.venousAccess} />
        </div>
      </CardContent>
    </Card>
  );
}

function LabResultsCard({ labResults }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Droplet className="w-6 h-6 mr-2" />
          Resultados de Laboratorio
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          <InfoItem label="Hematocrito" value={labResults.hto} />
          <InfoItem label="Hemoglobina" value={labResults.hb} />
          <InfoItem label="Plaquetas" value={labResults.platelets} />
          <InfoItem label="Glucosa" value={labResults.glucose} />
          <InfoItem label="Sodio" value={labResults.na} />
          <InfoItem label="Potasio" value={labResults.k} />
        </div>
        <InfoItem label="Otros" value={labResults.others} className="mt-4" />
      </CardContent>
    </Card>
  );
}

function ECGCard({ ecg }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Activity className="w-6 h-6 mr-2" />
          ECG
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <InfoItem label="Ritmo" value={ecg.rhythm} />
          <InfoItem
            label="Riesgo Cardiovascular"
            value={ecg.cardiovascularRisk}
          />
        </div>
      </CardContent>
    </Card>
  );
}

function ConsentCard({ consentText }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Pill className="w-6 h-6 mr-2" />
          Consentimiento Informado
        </CardTitle>
      </CardHeader>
      <CardContent>
        {consentText.map((text, index) => (
          <p
            key={index}
            className="text-sm text-gray-700 dark:text-gray-300 mb-2"
          >
            {text}
          </p>
        ))}
      </CardContent>
    </Card>
  );
}

function InfoItem({ label, value, className = "" }) {
  return (
    <div className={`flex flex-col ${className}`}>
      <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
        {label}
      </span>
      <span className="text-lg text-gray-900 dark:text-gray-200">{value}</span>
    </div>
  );
}

function QuestionItem({ question, answer }) {
  let icon;
  let color;
  switch (answer) {
    case "yes":
      icon = <CheckCircle2 className="w-5 h-5 text-green-500" />;
      color = "text-green-700 dark:text-green-300";
      break;
    case "no":
      icon = <XCircle className="w-5 h-5 text-red-500" />;
      color = "text-red-700 dark:text-red-300";
      break;
    default:
      icon = <HelpCircle className="w-5 h-5 text-yellow-500" />;
      color = "text-yellow-700 dark:text-yellow-300";
  }

  return (
    <div className="flex items-start space-x-2">
      {icon}
      <div>
        <p className="text-sm text-gray-700 dark:text-gray-300">{question}</p>
        <p className={`text-sm font-medium ${color}`}>
          {answer ? (answer === "yes" ? "Sí" : "No") : "No respondido"}
        </p>
      </div>
    </div>
  );
}

================
File: app/summary/page.tsx
================
"use client";

import { useEffect, useRef, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import {
  CheckCircle2,
  XCircle,
  HelpCircle,
  Activity,
  Thermometer,
  Droplet,
  Pill,
  Stethoscope,
  CircleAlert,
} from "lucide-react";
import { useSearchParams } from "next/navigation";
import { cn } from "@/lib/utils";
import jsPDF from "jspdf";
import html2pdf from "html2pdf.js";

interface Question {
  question: string;
  answer: string | null;
}

interface PhysicalExam {
  mouthOpening: string;
  mallampati: number;
  cervicalMobility: string;
  thyromentalDistance: string;
  jugularVeins: string;
  venousAccess: string;
}

interface LabResults {
  hto: string;
  hb: string;
  platelets: string;
  glucose: string;
  na: string;
  k: string;
  others: string;
}

interface ECG {
  rhythm: string;
  cardiovascularRisk: string;
}

interface CustomFormData {
  header: {
    title: string;
    subtitle1: string;
    subtitle2: string;
  };
  patientInfo: {
    name: string;
    age: string;
    weight: string;
    room: string;
  };
  questions: Question[];
  physicalExam: PhysicalExam;
  labResults: LabResults;
  ecg: ECG;
  consentText: string[];
}

export default function SummaryPage() {
  const [formData, setFormData] = useState<CustomFormData>({
    header: {
      title: "EVALUACIÓN PREANESTÉSICA",
      subtitle1: "PROVINCIA DE CORRIENTES",
      subtitle2: "Servicio de Cirugía miniinvasiva",
    },
    patientInfo: {
      name: "John Doe",
      age: "45",
      weight: "70",
      room: "101",
    },
    questions: [
      {
        question:
          "¿Le han dicho que padece o sufre alguna enfermedad del corazón?",
        answer: "yes",
      },
      {
        question:
          "¿Han sufrido o sufre de angina de pecho o infarto de miocardio?",
        answer: "no",
      },
      {
        question:
          "¿Se despertó alguna vez con sensación de falta de aire o necesitó variar la almohada para dormir?",
        answer: null,
      },
      {
        question:
          "¿Se agita exageradamente al subir escaleras?, ¿Realiza poca actividad física?",
        answer: null,
      },
      {
        question:
          "¿Ha sufrido o sufre de hipertensión arterial? ¿Toma algún medicamento?",
        answer: null,
      },
      {
        question:
          "¿Ha sufrido alguna enfermedad pulmonar prolongada (asma/bronquitis)?",
        answer: null,
      },
      {
        question: "¿Fuma? ¿Desde qué edad? ... N° de cigarrillos ... /día",
        answer: null,
      },
      { question: "¿Tose habitualmente? ¿Con o sin catarro?", answer: null },
      { question: "¿Ha sufrido o está recibiendo corticoides?", answer: null },
      { question: "¿Sabe si tiene diabetes?", answer: null },
      { question: "¿Ha tenido problemas de tiroides?", answer: null },
      {
        question: "¿Ha sufrido o tiene algún familiar con hepatitis?",
        answer: null,
      },
      {
        question: "¿Bebe alcohol? ¿Qué tipo y con qué frecuencia?",
        answer: null,
      },
      { question: "¿Sufre alergias? ¿A qué?", answer: null },
      {
        question: "¿Ha perdido peso? ¿Cuántos Kg. y en cuánto tiempo?",
        answer: null,
      },
      { question: "¿Padece alguna enfermedad renal?", answer: null },
      {
        question: "¿Ha tenido alguna vez convulsiones o epilepsia?",
        answer: null,
      },
      {
        question: "¿Tiene habitualmente dolores de cabeza? ¿Toma aspirina?",
        answer: null,
      },
      {
        question: "¿Sangra con facilidad o se le forman moretones fácilmente?",
        answer: null,
      },
      {
        question:
          "¿Ha sido sometido a cirugías anteriores y qué tipo de anestesia recibió?",
        answer: null,
      },
      {
        question: "¿Utiliza prótesis dentales? ¿tiene dientes flojos?",
        answer: null,
      },
      { question: "Actualmente ¿Toma algún medicamento?", answer: null },
      { question: "Si es mujer ¿Sospecha estar embarazada?", answer: null },
      {
        question:
          "¿Padece o padeció artrosis, debilidad muscular o osteoporosis?",
        answer: null,
      },
      {
        question:
          "¿Le cuesta conciliar el sueño? ¿Toma algún medicamento para dormir?",
        answer: null,
      },
    ],
    physicalExam: {
      mouthOpening: "5",
      mallampati: 2,
      cervicalMobility: "Normal",
      thyromentalDistance: "6",
      jugularVeins: "Visible",
      venousAccess: "Good",
    },
    labResults: {
      hto: "40",
      hb: "13",
      platelets: "150,000",
      glucose: "90",
      na: "140",
      k: "4",
      others: "None",
    },
    ecg: {
      rhythm: "Sinus",
      cardiovascularRisk: "Low",
    },
    consentText: [
      "Yo, ................................................., o en su defecto yo, ................................................., en carácter de testigo autorizo a que mi médico, luego de evaluar los inconvenientes eventuales y beneficios de la internación, estudios, tratamientos y/o intervención quirúrgica me efectúe.",
      "Asumiendo voluntariamente y conscientemente los riesgos propios del mismo, los cuales me fueron explicados detalladamente.",
      "Declaro haber sido informado de padecer .................................................. diagnóstico al que se arribó por medio de la evaluación clínica y los estudios complementarios. Consiento además en la administración de los anestésicos que sean considerados necesarios o convenientes por el médico responsable comprendiendo que ello puede implicar riesgos - Aclaro que he leído y entendido cada párrafo de esta autorización.",
    ],
  });

  const getParams = useSearchParams();
  const contentRef = useRef<HTMLDivElement>(null);

  console.log("aca", getParams.get("a"));

  useEffect(() => {
    const params = getParams.get("a");
    if (params) {
      const parsedParams = JSON.parse(params);
      setFormData(parsedParams);
    }
  }, []);

  function printPage() {
    window.print();
  }

  const handleImprimir = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "px",
      format: "a4",
    });

    if (contentRef && contentRef.current) {
      doc.html(contentRef.current, {
        callback: (pdf: any) => {
          pdf.save("clinical_form.pdf");
        },
        x: 10, // Horizontal margin
        y: 10, // Vertical margin
        html2canvas: {
          scale: 0.5, // Adjust the scale to fit content on the page
        },
        width: 190, // A4 width - horizontal margins (210 - 10*2)
      });
    }
  };

  const handleExportPDF = () => {
    //make it the whole document body
    const element = contentRef.current;
    if (element) {
      html2pdf()
        .set({
          margin: 0,
          filename: "clinical_form.pdf",
          image: { type: "jpeg", quality: 0.95 },
          html2canvas: { scale: 4 },
          jsPDF: { unit: "in", format: "a2", orientation: "portrait" },
        })
        .from(element)
        .save();
    }
  };

  return (
    <div
      ref={contentRef}
      className="min-h-screen bg-[hsl(0,0%,98%)] dark:from-gray-900 dark:to-gray-800 p-8"
    >
      <div className="max-w-[1400px] mx-auto space-y-8">
        <header className="text-center space-y-2">
          <h1 className="text-3xl font-bold text-black dark:text-blue-100">
            {formData.header.title}
          </h1>
          <div className="flex justify-between">
            <p className="text-xl text-black dark:text-blue-300">
              {formData.header.subtitle1}
            </p>
            <p className="text-lg text-black dark:text-blue-400">
              {formData.header.subtitle2}
            </p>
          </div>
        </header>

        <Section
          icon={<Stethoscope className="w-6 h-6" />}
          title="Información del Paciente"
        >
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 border rounded-lg p-4">
            <InfoItem
              icon={<Activity className="w-5 h-5" />}
              label="Nombre"
              value={formData.patientInfo.name}
            />
            <InfoItem
              icon={<Activity className="w-5 h-5" />}
              label="Edad"
              value={formData.patientInfo.age}
            />
            <InfoItem
              icon={<Activity className="w-5 h-5" />}
              label="Peso"
              value={`${formData.patientInfo.weight} kg`}
            />
            <InfoItem
              icon={<Activity className="w-5 h-5" />}
              label="Habitación"
              value={formData.patientInfo.room}
            />
          </div>
        </Section>

        <div className="card bg-white shadow-md rounded-lg p-6">
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <Thermometer className="w-6 h-6 mr-2" />
              <h2 className="text-2xl font-bold">Cuestionario Médico</h2>
            </div>
            <div className="relative grid grid-cols-1 sm:grid-cols-2 border rounded-lg">
              {/* Full height vertical separator for 2 columns */}
              <div className="hidden sm:block absolute inset-y-0 left-1/2 w-px bg-gray-300"></div>

              {formData.questions.map((q, index) => (
                <QuestionItem
                  key={index}
                  index={index}
                  question={q.question}
                  answer={q.answer}
                />
              ))}
            </div>
          </div>

          <div className="mb-8">
            <div className="flex items-center mb-4">
              <Activity className="w-6 h-6 mr-2" />
              <h2 className="text-2xl font-bold">Examen Físico</h2>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 border rounded-lg p-4">
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Apertura Bucal"
                value={formData.physicalExam.mouthOpening}
              />
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Mallampati"
                value={formData.physicalExam.mallampati.toString()}
              />
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Movilidad Cervical"
                value={formData.physicalExam.cervicalMobility}
              />
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Distancia Tiromentoniana"
                value={formData.physicalExam.thyromentalDistance}
              />
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Venas Yugulares"
                value={formData.physicalExam.jugularVeins}
              />
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Acceso Venoso"
                value={formData.physicalExam.venousAccess}
              />
            </div>
          </div>

          <div className="mb-8">
            <div className="flex items-center mb-4">
              <Droplet className="w-6 h-6 mr-2" />
              <h2 className="text-2xl font-bold">Resultados de Laboratorio</h2>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 border rounded-lg p-4">
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Hematocrito"
                value={formData.labResults.hto}
              />
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Hemoglobina"
                value={formData.labResults.hb}
              />
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Plaquetas"
                value={formData.labResults.platelets}
              />
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Glucosa"
                value={formData.labResults.glucose}
              />
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Sodio"
                value={formData.labResults.na}
              />
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Potasio"
                value={formData.labResults.k}
              />
              <InfoItem
                icon={<Droplet className="w-5 h-5" />}
                label="Otros"
                value={formData.labResults.others}
              />
            </div>
          </div>

          <div>
            <div className="flex items-center mb-4">
              <Activity className="w-6 h-6 mr-2" />
              <h2 className="text-2xl font-bold">ECG</h2>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Ritmo"
                value={formData.ecg.rhythm}
              />
              <InfoItem
                icon={<Activity className="w-5 h-5" />}
                label="Riesgo Cardiovascular"
                value={formData.ecg.cardiovascularRisk}
              />
            </div>
          </div>
        </div>

        <Section
          icon={<Pill className="w-6 h-6" />}
          title="Consentimiento Informado"
        >
          {formData.consentText.map((text, index) => (
            <p
              key={index}
              className="text-sm text-gray-700 dark:text-gray-300 mb-2"
            >
              {text}
            </p>
          ))}
        </Section>

        <div className="flex justify-between">
          <Button variant="outline">Editar</Button>
          <Button onClick={handleImprimir}>Imprimir</Button>
        </div>

        <footer className="text-center text-sm text-gray-600 dark:text-gray-400 mt-4">
          <p>
            Este documento es confidencial y destinado únicamente para uso
            médico.
          </p>
          <p>
            Generado el {new Date().toLocaleDateString()} a las{" "}
            {new Date().toLocaleTimeString()}
          </p>
          <button onClick={handleExportPDF}>pelotas</button>
        </footer>
      </div>
    </div>
  );
}

function Section({ icon, title, className, children }) {
  return (
    <Card className={(cn("overflow-hidden"), className)}>
      <CardContent className="p-6">
        <div className="flex items-center space-x-2 mb-4">
          {icon}
          <h2 className="text-xl font-semibold text-blue-800 dark:text-blue-200">
            {title}
          </h2>
        </div>
        <Separator className="mb-4" />
        <div className="space-y-4">{children}</div>
      </CardContent>
    </Card>
  );
}

function InfoItem({ icon, label, value }) {
  return (
    <div className="flex items-center space-x-2">
      {icon}
      <span className="font-medium text-gray-600 dark:text-gray-400">
        {label}:
      </span>
      <span className="text-gray-900 dark:text-gray-200">{value}</span>
    </div>
  );
}

function QuestionItem({ index, question, answer }) {
  let icon;
  switch (answer) {
    case "yes":
      icon = <CheckCircle2 className="w-5 h-5 text-black green-500" />;
      break;
    case "no":
      icon = <XCircle className="w-5 h-5 text-black red-500" />;
      break;
    default:
      icon = <CircleAlert className="w-5 h-5 text-black yellow-500" />;
  }

  return (
    <div
      className={`flex items-center space-x-2 py-3 px-4 ${
        index % 4 == 0 || index % 4 == 1 ? "bg-gray-100" : ""
      }`}
    >
      {icon}
      <div className="flex justify-between items-center w-full">
        <p className="text-sm text-gray-700 dark:text-gray-300">{question}</p>
        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
          {answer ? (answer === "yes" ? "Sí" : "No") : "No respondido"}
        </p>
      </div>
    </div>
  );
}

================
File: app/summary/timeline-style.tsx
================
"use client";

import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import {
  CheckCircle2,
  XCircle,
  HelpCircle,
  Activity,
  Thermometer,
  Droplet,
  Pill,
  Stethoscope,
  User,
  FileText,
  Clock,
} from "lucide-react";

// ... (keep the existing interfaces)

export default function SummaryPage() {
  const [formData, setFormData] = useState<CustomFormData>({
    // ... (keep the existing form data)
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 p-8">
      <div className="max-w-3xl mx-auto space-y-8">
        <header className="text-center space-y-2">
          <h1 className="text-4xl font-bold text-gray-900 dark:text-gray-100">
            {formData.header.title}
          </h1>
          <p className="text-xl text-gray-700 dark:text-gray-300">
            {formData.header.subtitle1}
          </p>
          <p className="text-lg text-gray-600 dark:text-gray-400">
            {formData.header.subtitle2}
          </p>
        </header>

        <div className="space-y-8">
          <TimelineItem
            icon={<User className="w-6 h-6" />}
            title="Información del Paciente"
            content={<PatientInfo patientInfo={formData.patientInfo} />}
          />
          <TimelineItem
            icon={<FileText className="w-6 h-6" />}
            title="Cuestionario Médico"
            content={<Questionnaire questions={formData.questions} />}
          />
          <TimelineItem
            icon={<Activity className="w-6 h-6" />}
            title="Examen Físico"
            content={<PhysicalExam physicalExam={formData.physicalExam} />}
          />
          <TimelineItem
            icon={<Droplet className="w-6 h-6" />}
            title="Resultados de Laboratorio"
            content={<LabResults labResults={formData.labResults} />}
          />
          <TimelineItem
            icon={<Activity className="w-6 h-6" />}
            title="ECG"
            content={<ECG ecg={formData.ecg} />}
          />
          <TimelineItem
            icon={<Pill className="w-6 h-6" />}
            title="Consentimiento Informado"
            content={<Consent consentText={formData.consentText} />}
          />
        </div>

        <div className="flex justify-between">
          <Button variant="outline">Editar</Button>
          <Button>Imprimir</Button>
        </div>

        <footer className="text-center text-sm text-gray-600 dark:text-gray-400 mt-4">
          <p>
            Este documento es confidencial y destinado únicamente para uso
            médico.
          </p>
          <p>
            Generado el {new Date().toLocaleDateString()} a las{" "}
            {new Date().toLocaleTimeString()}
          </p>
        </footer>
      </div>
    </div>
  );
}

function TimelineItem({ icon, title, content }) {
  return (
    <div className="flex">
      <div className="flex flex-col items-center mr-4">
        <div className="flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300">
          {icon}
        </div>
        <div className="w-px h-full bg-blue-300 dark:bg-blue-700"></div>
      </div>
      <div className="pb-8 w-full">
        <Card>
          <CardContent className="pt-6">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">
              {title}
            </h2>
            {content}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

function PatientInfo({ patientInfo }) {
  return (
    <div className="grid grid-cols-2 gap-4">
      <InfoItem label="Nombre" value={patientInfo.name} />
      <InfoItem label="Edad" value={patientInfo.age} />
      <InfoItem label="Peso" value={`${patientInfo.weight} kg`} />
      <InfoItem label="Habitación" value={patientInfo.room} />
    </div>
  );
}

function Questionnaire({ questions }) {
  return (
    <div className="space-y-4">
      {questions.map((q, index) => (
        <QuestionItem key={index} question={q.question} answer={q.answer} />
      ))}
    </div>
  );
}

function PhysicalExam({ physicalExam }) {
  return (
    <div className="grid grid-cols-2 gap-4">
      <InfoItem label="Apertura Bucal" value={physicalExam.mouthOpening} />
      <InfoItem label="Mallampati" value={physicalExam.mallampati.toString()} />
      <InfoItem
        label="Movilidad Cervical"
        value={physicalExam.cervicalMobility}
      />
      <InfoItem
        label="Distancia Tiromentoniana"
        value={physicalExam.thyromentalDistance}
      />
      <InfoItem label="Venas Yugulares" value={physicalExam.jugularVeins} />
      <InfoItem label="Acceso Venoso" value={physicalExam.venousAccess} />
    </div>
  );
}

function LabResults({ labResults }) {
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
      <InfoItem label="Hematocrito" value={labResults.hto} />
      <InfoItem label="Hemoglobina" value={labResults.hb} />
      <InfoItem label="Plaquetas" value={labResults.platelets} />
      <InfoItem label="Glucosa" value={labResults.glucose} />
      <InfoItem label="Sodio" value={labResults.na} />
      <InfoItem label="Potasio" value={labResults.k} />
      <InfoItem
        label="Otros"
        value={labResults.others}
        className="col-span-full"
      />
    </div>
  );
}

function ECG({ ecg }) {
  return (
    <div className="grid grid-cols-2 gap-4">
      <InfoItem label="Ritmo" value={ecg.rhythm} />
      <InfoItem label="Riesgo Cardiovascular" value={ecg.cardiovascularRisk} />
    </div>
  );
}

function Consent({ consentText }) {
  return (
    <div className="space-y-2">
      {consentText.map((text, index) => (
        <p key={index} className="text-sm text-gray-700 dark:text-gray-300">
          {text}
        </p>
      ))}
    </div>
  );
}

function InfoItem({ label, value, className = "" }) {
  return (
    <div className={`${className}`}>
      <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
        {label}
      </span>
      <p className="text-gray-900 dark:text-gray-200">{value}</p>
    </div>
  );
}

function QuestionItem({ question, answer }) {
  let icon;
  let color;
  switch (answer) {
    case "yes":
      icon = <CheckCircle2 className="w-5 h-5 text-green-500" />;
      color = "text-green-700 dark:text-green-300";
      break;
    case "no":
      icon = <XCircle className="w-5 h-5 text-red-500" />;
      color = "text-red-700 dark:text-red-300";
      break;
    default:
      icon = <HelpCircle className="w-5 h-5 text-yellow-500" />;
      color = "text-yellow-700 dark:text-yellow-300";
  }

  return (
    <div className="flex items-start space-x-2">
      {icon}
      <div>
        <p className="text-sm text-gray-700 dark:text-gray-300">{question}</p>
        <p className={`text-sm font-medium ${color}`}>
          {answer ? (answer === "yes" ? "Sí" : "No") : "No respondido"}
        </p>
      </div>
    </div>
  );
}

================
File: app/test/components.tsx
================
import { useRef, useState } from "react";
import { CustomFormData } from "./page";
import jsPDF from "jspdf";
import { Button } from "@/components/ui/button";
import html2pdf from "html2pdf.js";

interface ResultProps {
  formData: CustomFormData;
}

export function Result({ formData }: ResultProps) {
  const sampleFormData = {
    header: {
      title: "EVALUACIÓN PREANESTÉSICA",
      subtitle1: "PROVINCIA DE CORRIENTES",
      subtitle2: "Servicio de Cirugía miniinvasiva",
    },
    patientInfo: {
      name: "John Doe",
      age: "45",
      weight: "70",
      room: "101",
    },
    questions: [
      // {[
      //   "¿Le han dicho que padece o sufre alguna enfermedad del corazón?",
      //   "¿Han sufrido o sufre de angina de pecho o infarto de miocardio?",
      //   "¿Se despertó alguna vez con sensación de falta de aire o necesitó variar la almohada para dormir?",
      //   "¿Se agita exageradamente al subir escaleras?, ¿Realiza poca actividad física?",
      //   "¿Ha sufrido o sufre de hipertensión arterial? ¿Toma algún medicamento?",
      //   "¿Ha sufrido alguna enfermedad pulmonar prolongada (asma/bronquitis)?",
      //   "¿Fuma? ¿Desde qué edad? ... N° de cigarrillos ... /día",
      //   "¿Tose habitualmente? ¿Con o sin catarro?",
      //   "¿Ha sufrido o está recibiendo corticoides?",
      //   "¿Sabe si tiene diabetes?",
      //   "¿Ha tenido problemas de tiroides?",
      //   "¿Ha sufrido o tiene algún familiar con hepatitis?",
      //   "¿Bebe alcohol? ¿Qué tipo y con qué frecuencia?",
      //   "¿Sufre alergias? ¿A qué?",
      //   "¿Ha perdido peso? ¿Cuántos Kg. y en cuánto tiempo?",
      //   "¿Padece alguna enfermedad renal?",
      //   "¿Ha tenido alguna vez convulsiones o epilepsia?",
      //   "¿Tiene habitualmente dolores de cabeza? ¿Toma aspirina?",
      //   "¿Sangra con facilidad o se le forman moretones fácilmente?",
      //   "¿Ha sido sometido a cirugías anteriores y qué tipo de anestesia recibió?",
      //   "¿Utiliza prótesis dentales? ¿tiene dientes flojos?",
      //   "Actualmente ¿Toma algún medicamento?",
      //   "Si es mujer ¿Sospecha estar embarazada?",
      //   "¿Padece o padeció artrosis, debilidad muscular o osteoporosis?",
      //   "¿Le cuesta conciliar el sueño? ¿Toma algún medicamento para dormir?"
      // ]},
      {
        question:
          "¿Le han dicho que padece o sufre alguna enfermedad del corazón?",
        answer: "yes",
      },
      {
        question:
          "¿Han sufrido o sufre de angina de pecho o infarto de miocardio?",
        answer: "no",
      },
      {
        question:
          "¿Se despertó alguna vez con sensación de falta de aire o necesitó variar la almohada para dormir?",
        answer: null,
      },
      {
        question:
          "¿Se agita exageradamente al subir escaleras?, ¿Realiza poca actividad física?",
        answer: null,
      },
      {
        question:
          "¿Ha sufrido o sufre de hipertensión arterial? ¿Toma algún medicamento?",
        answer: null,
      },
      {
        question:
          "¿Ha sufrido alguna enfermedad pulmonar prolongada (asma/bronquitis)?",
        answer: null,
      },
      {
        question: "¿Fuma? ¿Desde qué edad? ... N° de cigarrillos ... /día",
        answer: null,
      },
      { question: "¿Tose habitualmente? ¿Con o sin catarro?", answer: null },
      { question: "¿Ha sufrido o está recibiendo corticoides?", answer: null },
      { question: "¿Sabe si tiene diabetes?", answer: null },
      { question: "¿Ha tenido problemas de tiroides?", answer: null },
      {
        question: "¿Ha sufrido o tiene algún familiar con hepatitis?",
        answer: null,
      },
      {
        question: "¿Bebe alcohol? ¿Qué tipo y con qué frecuencia?",
        answer: null,
      },
      { question: "¿Sufre alergias? ¿A qué?", answer: null },
      {
        question: "¿Ha perdido peso? ¿Cuántos Kg. y en cuánto tiempo?",
        answer: null,
      },
      { question: "¿Padece alguna enfermedad renal?", answer: null },
      {
        question: "¿Ha tenido alguna vez convulsiones o epilepsia?",
        answer: null,
      },
      {
        question: "¿Tiene habitualmente dolores de cabeza? ¿Toma aspirina?",
        answer: null,
      },
      {
        question: "¿Sangra con facilidad o se le forman moretones fácilmente?",
        answer: null,
      },
      {
        question:
          "¿Ha sido sometido a cirugías anteriores y qué tipo de anestesia recibió?",
        answer: null,
      },
      {
        question: "¿Utiliza prótesis dentales? ¿tiene dientes flojos?",
        answer: null,
      },
      { question: "Actualmente ¿Toma algún medicamento?", answer: null },
      { question: "Si es mujer ¿Sospecha estar embarazada?", answer: null },
      {
        question:
          "¿Padece o padeció artrosis, debilidad muscular o osteoporosis?",
        answer: null,
      },
      {
        question:
          "¿Le cuesta conciliar el sueño? ¿Toma algún medicamento para dormir?",
        answer: null,
      },

      // Add more questions as needed
    ],
    physicalExam: {
      mouthOpening: "5",
      mallampati: 2,
      cervicalMobility: "Normal",
      thyromentalDistance: "6",
      jugularVeins: "Visible",
      venousAccess: "Good",
    },
    labResults: {
      hto: "40",
      hb: "13",
      platelets: "150,000",
      glucose: "90",
      na: "140",
      k: "4",
      others: "None",
    },
    ecg: {
      rhythm: "Sinus",
      cardiovascularRisk: "Low",
    },
    consentText: [
      "Yo, ................................................., o en su defecto yo, ................................................., en carácter de testigo autorizo a que mi médico, luego de evaluar los inconvenientes eventuales y beneficios de la internación, estudios, tratamientos y/o intervención quirúrgica me efectúe.",
      "Asumiendo voluntariamente y conscientemente los riesgos propios del mismo, los cuales me fueron explicados detalladamente.",
      "Declaro haber sido informado de padecer .................................................. diagnóstico al que se arribó por medio de la evaluación clínica y los estudios complementarios. Consiento además en la administración de los anestésicos que sean considerados necesarios o convenientes por el médico responsable comprendiendo que ello puede implicar riesgos - Aclaro que he leído y entendido cada párrafo de esta autorización.",
    ],
  };

  return <ClinicalForm formData={formData ? formData : sampleFormData} />;
}

const ClinicalForm = ({ formData }: { formData: any }) => {
  const [state, setState] = useState(formData);

  const handleInputChange = (section: string, key: string, value: string) => {
    setState((prevState: any) => ({
      ...prevState,
      [section]: {
        ...prevState[section],
        [key]: value,
      },
    }));
  };

  const contentRef = useRef<HTMLDivElement>(null);

  const handleExportPDF = () => {
    const element = contentRef.current;
    if (element) {
      html2pdf()
        .set({
          margin: 10,
          filename: "clinical_form.pdf",
          image: { type: "jpeg", quality: 0.98 },
          html2canvas: { scale: 2 },
          jsPDF: { unit: "px", format: "a4", orientation: "portrait" },
        })
        .from(element)
        .save();
    }
  };

  return (
    <>
      <div ref={contentRef} className=" mx-auto p-8 bg-white">
        {/* Header Section */}
        <div className="text-center mb-4">
          <div className="font-bold text-xl mb-2">{formData.header.title}</div>
          <div className="text-sm mb-2">{formData.header.subtitle1}</div>
          <div className="text-sm mb-4">{formData.header.subtitle2}</div>
        </div>

        {/* Patient Info Section */}
        <div className="flex justify-between items-center mb-6">
          <div className="flex gap-4 items-center">
            <span className="font-bold">PACIENTE:</span>
            <input
              type="text"
              className="border-b border-gray-300 w-48"
              defaultValue={formData.patientInfo.name}
            />
            <span className="font-bold">EDAD:</span>
            <input
              type="text"
              className="border-b border-gray-300 w-16"
              defaultValue={formData.patientInfo.age}
            />
            <span>años</span>
            <span className="font-bold">PESO:</span>
            <input
              type="text"
              className="border-b border-gray-300 w-16"
              defaultValue={formData.patientInfo.weight}
            />
            <span>Kg.</span>
          </div>
          <div className="flex gap-2">
            <span className="font-bold">SALA:</span>
            <input
              type="text"
              className="border-b border-gray-300 w-16"
              defaultValue={formData.patientInfo.room}
            />
          </div>
        </div>

        {/* Interrogatorio Section */}
        <div className="mb-6">
          <div className="font-bold text-center mb-4">INTERROGATORIO</div>
          <div className="space-y-2">
            {formData.questions.map((item: any, index: number) => {
              return (
                <div key={index} className="flex items-start gap-4">
                  <span className="w-6">{index + 1})</span>
                  <span className="flex-1">{item.question}</span>
                  <div className="flex gap-4">
                    <label>
                      <input
                        type="radio"
                        name={`question-${index}`}
                        value="Sí"
                        checked={item.answer === "Sí"}
                      />{" "}
                      SI
                    </label>
                    <label>
                      <input
                        type="radio"
                        name={`question-${index}`}
                        value="No"
                        checked={item.answer === "No"}
                      />{" "}
                      NO
                    </label>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Physical Exam Section */}
        <div className="mb-6">
          <div className="font-bold">EXAMEN FÍSICO:</div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <div>
                Apertura bucal:{" "}
                <input
                  type="text"
                  className="border-b border-gray-300 w-16"
                  defaultValue={formData.physicalExam.mouthOpening}
                />{" "}
                cm
              </div>
              <div>
                Mallampati: <span>{formData.physicalExam.mallampati}</span>
              </div>
              <div>
                Movilidad cervical:{" "}
                <input
                  type="text"
                  className="border-b border-gray-300 w-16"
                  defaultValue={formData.physicalExam.cervicalMobility}
                />
              </div>
            </div>
            <div>
              <div>
                Distancia tiromentoniana:{" "}
                <input
                  type="text"
                  className="border-b border-gray-300 w-16"
                  defaultValue={formData.physicalExam.thyromentalDistance}
                />{" "}
                cm
              </div>
              <div>
                Venas yugulares:{" "}
                <input
                  type="text"
                  className="border-b border-gray-300 w-16"
                  defaultValue={formData.physicalExam.jugularVeins}
                />
              </div>
              <div>
                Accesos venosos:{" "}
                <input
                  type="text"
                  className="border-b border-gray-300 w-16"
                  defaultValue={formData.physicalExam.venousAccess}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Laboratory Section */}
        <div className="mb-6">
          <div className="font-bold">LABORATORIO:</div>
          <div className="grid grid-cols-4 gap-4">
            {Object.entries(formData.labResults).map(([key, value]) => (
              <div key={key}>
                <div>
                  {key.toUpperCase()}:{" "}
                  <input
                    type="text"
                    className="border-b border-gray-300 w-16"
                    defaultValue={value as string}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* ECG Section */}
        <div className="mb-6">
          <div className="font-bold">ECG:</div>
          <div>
            Ritmo:{" "}
            <input
              type="text"
              className="border-b border-gray-300 w-64"
              defaultValue={formData.ecg.rhythm}
            />
            Riesgo quirúrgico cardiovascular:{" "}
            <input
              type="text"
              className="border-b border-gray-300 w-16"
              defaultValue={formData.ecg.cardiovascularRisk}
            />
          </div>
        </div>

        {/* Consent Text */}
        <div className="text-sm mt-8">
          {formData.consentText.map((paragraph: string, index: number) => (
            <p key={index} className="mb-4">
              {paragraph}
            </p>
          ))}
        </div>
      </div>
      <Button onClick={handleExportPDF}>Exportar a PDF</Button>
    </>
  );
};

================
File: app/test/page.tsx
================
// app/page.tsx
'use client'
import { Button } from "@/components/ui/button";
import React, { useRef, useState } from "react";
import jsPDF from 'jspdf';
import { Result } from "./components";

export interface CustomFormData {
  header: {
    title: string;
    subtitle1: string;
    subtitle2: string;
  };
  patientInfo: {
    name: string;
    age: string;
    weight: string;
    room: string;
  };
  questions: {
    question: string;
    answer: string | null;
  }[];
  physicalExam: {
    mouthOpening: string;
    mallampati: number;
    cervicalMobility: string;
    thyromentalDistance: string;
    jugularVeins: string;
    venousAccess: string;
  };
  labResults: {
    hto: string;
    hb: string;
    platelets: string;
    glucose: string;
    na: string;
    k: string;
    others: string;
  };
  ecg: {
    rhythm: string;
    cardiovascularRisk: string;
  };
  consentText: string[];
}

export default function Home() {
  const sampleFormData: CustomFormData = {
    header: {
      title: "EVALUACIÓN PREANESTÉSICA",
      subtitle1: "PROVINCIA DE CORRIENTES",
      subtitle2: "Servicio de Cirugía miniinvasiva",
    },
    patientInfo: {
      name: "John Doe",
      age: "45",
      weight: "70",
      room: "101",
    },
    questions: [
      { question: "¿Le han dicho que padece o sufre alguna enfermedad del corazón?", answer: "yes" },
      { question: "¿Han sufrido o sufre de angina de pecho o infarto de miocardio?", answer: "no" },
      { question: "¿Se despertó alguna vez con sensación de falta de aire o necesitó variar la almohada para dormir?", answer: null },
      { question: "¿Se agita exageradamente al subir escaleras?, ¿Realiza poca actividad física?", answer: null },
      { question: "¿Ha sufrido o sufre de hipertensión arterial? ¿Toma algún medicamento?", answer: null },
      { question: "¿Ha sufrido alguna enfermedad pulmonar prolongada (asma/bronquitis)?", answer: null },
      { question: "¿Fuma? ¿Desde qué edad? ... N° de cigarrillos ... /día", answer: null },
      { question: "¿Tose habitualmente? ¿Con o sin catarro?", answer: null },
      { question: "¿Ha sufrido o está recibiendo corticoides?", answer: null },
      { question: "¿Sabe si tiene diabetes?", answer: null },
      { question: "¿Ha tenido problemas de tiroides?", answer: null },
      { question: "¿Ha sufrido o tiene algún familiar con hepatitis?", answer: null },
      { question: "¿Bebe alcohol? ¿Qué tipo y con qué frecuencia?", answer: null },
      { question: "¿Sufre alergias? ¿A qué?", answer: null },
      { question: "¿Ha perdido peso? ¿Cuántos Kg. y en cuánto tiempo?", answer: null },
      { question: "¿Padece alguna enfermedad renal?", answer: null },
      { question: "¿Ha tenido alguna vez convulsiones o epilepsia?", answer: null },
      { question: "¿Tiene habitualmente dolores de cabeza? ¿Toma aspirina?", answer: null },
      { question: "¿Sangra con facilidad o se le forman moretones fácilmente?", answer: null },
      { question: "¿Ha sido sometido a cirugías anteriores y qué tipo de anestesia recibió?", answer: null },
      { question: "¿Utiliza prótesis dentales? ¿tiene dientes flojos?", answer: null },
      { question: "Actualmente ¿Toma algún medicamento?", answer: null },
      { question: "Si es mujer ¿Sospecha estar embarazada?", answer: null },
      { question: "¿Padece o padeció artrosis, debilidad muscular o osteoporosis?", answer: null },
      { question: "¿Le cuesta conciliar el sueño? ¿Toma algún medicamento para dormir?", answer: null },
    ],
    physicalExam: {
      mouthOpening: "5",
      mallampati: 2,
      cervicalMobility: "Normal",
      thyromentalDistance: "6",
      jugularVeins: "Visible",
      venousAccess: "Good",
    },
    labResults: {
      hto: "40",
      hb: "13",
      platelets: "150,000",
      glucose: "90",
      na: "140",
      k: "4",
      others: "None",
    },
    ecg: {
      rhythm: "Sinus",
      cardiovascularRisk: "Low",
    },
    consentText: [
      "Yo, ................................................., o en su defecto yo, ................................................., en carácter de testigo autorizo a que mi médico, luego de evaluar los inconvenientes eventuales y beneficios de la internación, estudios, tratamientos y/o intervención quirúrgica me efectúe.",
      "Asumiendo voluntariamente y conscientemente los riesgos propios del mismo, los cuales me fueron explicados detalladamente.",
      "Declaro haber sido informado de padecer .................................................. diagnóstico al que se arribó por medio de la evaluación clínica y los estudios complementarios. Consiento además en la administración de los anestésicos que sean considerados necesarios o convenientes por el médico responsable comprendiendo que ello puede implicar riesgos - Aclaro que he leído y entendido cada párrafo de esta autorización.",
    ],

  };

  return (<Result formData={sampleFormData} />);
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: components/dashboard/DashboardMetrics.tsx
================
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { Activity, FileText, CheckCircle, AlertCircle } from "lucide-react";
import { useFormList } from "@/hooks/useFormLists";

function MetricCard({
  title,
  value,
  description,
  icon: Icon,
  trend,
}: {
  title: string;
  value: string | number;
  description?: string;
  icon: typeof Activity;
  trend?: { value: number; isPositive: boolean };
}) {
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {description && (
          <p className="text-xs text-muted-foreground">{description}</p>
        )}
        {trend && (
          <div
            className={`text-xs mt-1 ${
              trend.isPositive ? "text-green-500" : "text-red-500"
            }`}
          >
            {trend.isPositive ? "↑" : "↓"} {Math.abs(trend.value)}% from last
            month
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function StatusDistribution({
  statuses,
}: {
  statuses: { name: string; value: number }[];
}) {
  return (
    <div className="flex gap-2">
      {statuses.map((status) => (
        <div
          key={status.name}
          className="flex-1 text-center p-2 bg-card rounded-lg border"
        >
          <div className="text-2xl font-bold">{status.value}</div>
          <div className="text-xs text-muted-foreground">{status.name}</div>
        </div>
      ))}
    </div>
  );
}

function FormActivityChart({
  data,
}: {
  data: { date: string; count: number }[];
}) {
  return (
    <div className="h-[200px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={data}
          margin={{ top: 5, right: 10, left: 10, bottom: 0 }}
        >
          <CartesianGrid strokeDasharray="3 3" vertical={false} />
          <XAxis
            dataKey="date"
            tickLine={false}
            tickMargin={10}
            className="text-xs"
          />
          <YAxis tickLine={false} tickMargin={10} className="text-xs" />
          <Tooltip />
          <Line
            type="monotone"
            dataKey="count"
            stroke="hsl(var(--primary))"
            strokeWidth={2}
            dot={false}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

export default function DashboardMetrics() {
  const { forms } = useFormList();

  // Calculate basic metrics
  const totalForms = forms.length;
  const publishedForms = forms.filter((f) => f.isPublished).length;
  const draftForms = totalForms - publishedForms;
  const completedForms = 0; // This will be replaced with actual submissions data

  // Calculate status distribution
  const statuses = [
    { name: "Published", value: publishedForms },
    { name: "Drafts", value: draftForms },
    { name: "Completed", value: completedForms },
  ];

  // Generate mock activity data for the last 7 days
  const activityData = Array.from({ length: 7 })
    .map((_, i) => {
      const date = new Date();
      date.setDate(date.getDate() - i);
      return {
        date: date.toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
        }),
        count: Math.floor(Math.random() * 10),
      };
    })
    .reverse();

  return (
    <div className="space-y-4">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <MetricCard
          title="Total Forms"
          value={totalForms}
          description="Total forms created"
          icon={FileText}
          trend={{ value: 12, isPositive: true }}
        />
        <MetricCard
          title="Published Forms"
          value={publishedForms}
          description="Forms available to users"
          icon={CheckCircle}
          trend={{ value: 8, isPositive: true }}
        />
        <MetricCard
          title="Draft Forms"
          value={draftForms}
          description="Forms in progress"
          icon={AlertCircle}
          trend={{ value: 4, isPositive: false }}
        />
        <MetricCard
          title="Submissions"
          value={completedForms}
          description="Total form submissions"
          icon={Activity}
          trend={{ value: 0, isPositive: true }}
        />
      </div>

      <div className="grid gap-4 md:grid-cols-2">
        <Card className="col-span-2">
          <CardHeader>
            <CardTitle>Form Activity</CardTitle>
            <CardDescription>Form submissions over time</CardDescription>
          </CardHeader>
          <CardContent>
            <FormActivityChart data={activityData} />
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Form Status Distribution</CardTitle>
          <CardDescription>Overview of form statuses</CardDescription>
        </CardHeader>
        <CardContent>
          <StatusDistribution statuses={statuses} />
        </CardContent>
      </Card>
    </div>
  );
}

================
File: components/dashboard/Forms/FormEditor.tsx
================
"use client";

import React, { useEffect, useState } from "react";
import {
  DragDropContext,
  Droppable,
  Draggable,
  DropResult,
} from "@hello-pangea/dnd"; // or "react-beautiful-dnd"
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ArrowLeft, Grip, GripVertical } from "lucide-react";
import { MedicalQuestionnaire } from "@/components/MedicalQuestionnaire/MedicalQuestionnaire";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import { useFormList } from "@/hooks/useFormLists";
import Link from "next/link";

interface Question {
  id: string;
  title: string;
  type: string;
  options?: string[];
}

interface Step {
  title: string;
  questions: Question[];
}

const initialQuestionsBank: Question[] = [
  { id: "q-1", title: "Nombre", type: "TEXT" },
  { id: "q-2", title: "Edad", type: "TEXT" },
  { id: "q-3", title: "Peso", type: "TEXT" },
  { id: "q-4", title: "Habitación", type: "TEXT" },
  {
    id: "q-5",
    title: "¿Padece alguna enfermedad del corazón?",
    type: "LIST",
  },
  {
    id: "q-6",
    title: "Pregunta de opción múltiple",
    type: "MULTIPLE_CHOICE",
    options: ["Opción 1", "Opción 2", "Opción 3"],
  },
  {
    id: "q-7",
    title: "Mallampati",
    type: "SELECT",
    options: ["1", "2", "3", "4"],
  },
  {
    id: "q-8",
    title: "Otros (Laboratorio)",
    type: "PARAGRAPH_TEXT",
  },
];

const initialSteps: Step[] = [
  {
    title: "Información Personal",
    questions: [],
  },
  {
    title: "Condiciones Médicas",
    questions: [],
  },
  {
    title: "Examen Físico",
    questions: [],
  },
  {
    title: "Laboratorio",
    questions: [],
  },
];

export default function FormEditor({ formId }: Props) {
  const router = useRouter();
  const { toast } = useToast();
  const { createForm, updateForm, getFormById } = useFormList();

  // Form metadata
  const [formTitle, setFormTitle] = useState("Nuevo Formulario");

  // Steps and questions state
  const [steps, setSteps] = useState<Step[]>(initialSteps);
  const [questionsBank, setQuestionsBank] =
    useState<Question[]>(initialQuestionsBank);

  // States for new question creation
  const [newQuestionTitle, setNewQuestionTitle] = useState("");
  const [newQuestionType, setNewQuestionType] = useState("TEXT");
  const [newQuestionOptions, setNewQuestionOptions] = useState<string[]>([]);
  const [newOption, setNewOption] = useState("");

  // UI states
  const [showMedicalQuestionnaire, setShowMedicalQuestionnaire] =
    useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // Load existing form data if editing
  useEffect(() => {
    if (formId) {
      const existingForm = getFormById(formId);
      if (existingForm) {
        setFormTitle(existingForm.title);
        setSteps(existingForm.steps);
      } else {
        toast({
          title: "Error",
          description: "Form not found",
          variant: "destructive",
        });
        // router.push("/forms");
      }
    }
  }, [formId, getFormById, router, toast]);

  const handleSave = async () => {
    setIsLoading(true);
    try {
      const formData = {
        title: formTitle,
        steps,
        isPublished: false,
        createdBy: "user123", // This will be replaced with actual user ID when auth is implemented
      };

      if (formId) {
        // Directly call updateForm without await since it's synchronous
        updateForm(formId, formData);
        toast({
          title: "Success",
          description: "Form updated successfully",
        });
      } else {
        // Create is also synchronous
        const newForm = createForm(formData);
        toast({
          title: "Success",
          description: "Form created successfully",
        });
        router.push(`/forms/${newForm.id}/edit`);
      }
    } catch (error) {
      toast({
        title: "Error",
        description:
          error instanceof Error ? error.message : "Failed to save form",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const onDragEnd = (result: DropResult) => {
    const { source, destination, type } = result;

    // If no destination or dropped outside droppable area
    if (!destination) return;

    // If dropped in the same place
    if (
      source.droppableId === destination.droppableId &&
      source.index === destination.index
    ) {
      return;
    }

    // Handle step reordering if type is STEP
    if (type === "STEP") {
      const newSteps = [...steps];
      const [removedStep] = newSteps.splice(source.index, 1);
      newSteps.splice(destination.index, 0, removedStep);
      setSteps(newSteps);
      return;
    }

    // From here on, handle questions dragging
    // Handle drop from Questions Bank to a Step
    if (source.droppableId === "questionsBank") {
      const draggedQuestion = filteredQuestions[source.index];
      // Clone with a unique ID
      const newQuestion = {
        ...draggedQuestion,
        id: `${draggedQuestion.id}-${Date.now()}`,
      };

      const stepIndex = parseInt(destination.droppableId.replace("step-", ""));
      const newSteps = [...steps];
      newSteps[stepIndex].questions.splice(destination.index, 0, newQuestion);
      setSteps(newSteps);
      return;
    }

    // Handle rearranging questions within or between steps
    const startStepIndex = parseInt(source.droppableId.replace("step-", ""));
    const endStepIndex = parseInt(destination.droppableId.replace("step-", ""));

    const newSteps = [...steps];
    const [removed] = newSteps[startStepIndex].questions.splice(
      source.index,
      1
    );
    newSteps[endStepIndex].questions.splice(destination.index, 0, removed);
    setSteps(newSteps);
  };

  const handleAddQuestion = () => {
    if (!newQuestionTitle) return;
    const newQ: Question = {
      id: `new-${Date.now()}`,
      title: newQuestionTitle,
      type: newQuestionType,
      options:
        newQuestionType === "SELECT" || newQuestionType === "MULTIPLE_CHOICE"
          ? newQuestionOptions
          : undefined,
    };
    setQuestionsBank((prev) => [...prev, newQ]);
    setNewQuestionTitle("");
    setNewQuestionType("TEXT");
    setNewQuestionOptions([]);
  };

  const addOption = () => {
    if (!newOption) return;
    setNewQuestionOptions((prev) => [...prev, newOption]);
    setNewOption("");
  };

  const handleAddStep = () => {
    const newStep: Step = {
      title: `Nueva Sección ${steps.length + 1}`,
      questions: [],
    };
    setSteps((prev) => [...prev, newStep]);
  };

  const handleChangeStepTitle = (index: number, newTitle: string) => {
    const updatedSteps = [...steps];
    updatedSteps[index].title = newTitle;
    setSteps(updatedSteps);
  };

  const filteredQuestions = questionsBank.filter((q) =>
    q.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="h-screen flex flex-col">
      <div className="p-4 border-b flex justify-between items-center">
        <div className="flex items-center gap-4">
          <Button variant="ghost" asChild>
            <Link href="/forms">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Forms
            </Link>
          </Button>
          <Input
            value={formTitle}
            onChange={(e) => setFormTitle(e.target.value)}
            className="text-2xl font-bold border-none focus-visible:ring-0 w-[300px]"
          />
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={handleAddStep}>
            Agregar nueva sección
          </Button>
          <Button
            variant="outline"
            onClick={() => setShowMedicalQuestionnaire((prev) => !prev)}
          >
            {showMedicalQuestionnaire ? "Mostrar Editor" : "Preview"}
          </Button>
          <Button onClick={handleSave} disabled={isLoading}>
            {isLoading ? "Saving..." : "Save"}
          </Button>
        </div>
      </div>

      {showMedicalQuestionnaire ? (
        <MedicalQuestionnaire propSteps={steps} />
      ) : (
        <DragDropContext onDragEnd={onDragEnd}>
          <div className="flex flex-1 bg-slate-100">
            {/* Sidebar */}
            <div className="w-1/4 bg-white border-r p-4 overflow-y-auto">
              <h2 className="text-xl font-bold mb-4">Banco de preguntas</h2>
              <div className="mb-4">
                <Input
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Buscar pregunta..."
                />
              </div>
              <Droppable
                droppableId="questionsBank"
                isCombineEnabled={false}
                isDropDisabled={false}
                type="QUESTION"
              >
                {(provided) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                    className="space-y-2"
                  >
                    {filteredQuestions.map((q, index) => (
                      <Draggable key={q.id} draggableId={q.id} index={index}>
                        {(provided, snapshot) => (
                          <div
                            className={`p-2 border rounded bg-slate-50 cursor-grab flex justify-between items-center ${
                              snapshot.isDragging ? "bg-indigo-100" : ""
                            }`}
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                          >
                            <div>
                              <div className="font-medium">{q.title}</div>
                              <div className="text-xs text-gray-500">
                                {q.type}
                              </div>
                            </div>
                            <GripVertical />
                          </div>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>

              <div className="mt-6 pt-4 border-t">
                <h3 className="text-lg font-semibold mb-2">
                  Agregar nueva pregunta
                </h3>
                <div className="mb-2">
                  <Label className="mb-1">Título</Label>
                  <Input
                    value={newQuestionTitle}
                    onChange={(e) => setNewQuestionTitle(e.target.value)}
                    placeholder="Título de la pregunta"
                  />
                </div>
                <div className="mb-2">
                  <Label className="mb-1">Tipo</Label>
                  <Select
                    value={newQuestionType}
                    onValueChange={setNewQuestionType}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Seleccionar tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="TEXT">Texto simple</SelectItem>
                      <SelectItem value="LIST">Sí/No</SelectItem>
                      <SelectItem value="MULTIPLE_CHOICE">
                        Múltiple selección
                      </SelectItem>
                      <SelectItem value="PARAGRAPH_TEXT">
                        Texto largo
                      </SelectItem>
                      <SelectItem value="SELECT">Seleccionar uno</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {(newQuestionType === "MULTIPLE_CHOICE" ||
                  newQuestionType === "SELECT") && (
                  <div className="mb-2">
                    <Label className="mb-1">Opciones</Label>
                    {newQuestionOptions.map((o, i) => (
                      <div
                        key={i}
                        className="text-sm bg-gray-100 px-2 py-1 rounded mb-1"
                      >
                        {o}
                      </div>
                    ))}
                    <div className="flex items-center space-x-2">
                      <Input
                        value={newOption}
                        onChange={(e) => setNewOption(e.target.value)}
                        placeholder="Nueva opción"
                      />
                      <Button onClick={addOption}>Agregar</Button>
                    </div>
                  </div>
                )}

                <Button onClick={handleAddQuestion} className="mt-2">
                  Añadir al banco
                </Button>
              </div>
            </div>

            {/* Main content */}
            <div className="flex-1 p-4 overflow-y-auto bg-white border rounded-xl mt-5 mx-24">
              <h2 className="text-2xl font-bold mb-4">
                Secciones del Formulario
              </h2>
              <Droppable droppableId="stepsDroppable" type="STEP">
                {(provided) => (
                  <div ref={provided.innerRef} {...provided.droppableProps}>
                    {steps.map((step, sIndex) => (
                      <Draggable
                        key={step.title}
                        draggableId={step.title}
                        index={sIndex}
                      >
                        {(providedStep, snapshotStep) => (
                          <div
                            ref={providedStep.innerRef}
                            {...providedStep.draggableProps}
                            className={`mb-8 border rounded-lg p-4 ${
                              snapshotStep.isDragging ? "bg-indigo-50" : ""
                            }`}
                          >
                            <div
                              className="flex items-center mb-2"
                              {...providedStep.dragHandleProps}
                            >
                              <Input
                                className="flex-1 border-none md:text-2xl p-0 h-10"
                                value={step.title}
                                onChange={(e) =>
                                  handleChangeStepTitle(sIndex, e.target.value)
                                }
                              />
                            </div>
                            <Droppable
                              droppableId={`step-${sIndex}`}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              type="QUESTION"
                            >
                              {(providedQ) => (
                                <div
                                  ref={providedQ.innerRef}
                                  {...providedQ.droppableProps}
                                  className="min-h-[100px] p-4 pb-7 border-2 border-dashed border-gray-300 rounded"
                                >
                                  {step.questions.map((q, index) => (
                                    <Draggable
                                      key={q.id}
                                      draggableId={q.id}
                                      index={index}
                                    >
                                      {(providedQItem, snapshotQItem) => (
                                        <div
                                          className={`p-2 border rounded bg-slate-50 mb-2 flex justify-between items-center ${
                                            snapshotQItem.isDragging
                                              ? "bg-indigo-50"
                                              : ""
                                          }`}
                                          ref={providedQItem.innerRef}
                                          {...providedQItem.draggableProps}
                                          {...providedQItem.dragHandleProps}
                                        >
                                          <div>
                                            <div className="font-medium">
                                              {q.title}
                                            </div>
                                            <div className="text-xs text-gray-500">
                                              {q.type}
                                            </div>
                                          </div>
                                          <GripVertical />
                                        </div>
                                      )}
                                    </Draggable>
                                  ))}
                                  {providedQ.placeholder}
                                </div>
                              )}
                            </Droppable>
                          </div>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </div>
          </div>
        </DragDropContext>
      )}
    </div>
  );
}

================
File: components/dashboard/Forms/FormList.tsx
================
import { useToast } from "@/hooks/use-toast";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Edit2, Eye, Trash2 } from "lucide-react";
import { useFormList } from "@/hooks/useFormLists";

export function FormList() {
  const { forms, deleteForm } = useFormList();
  const { toast } = useToast();

  const handleDelete = async (id: string) => {
    const success = await deleteForm(id);
    if (success) {
      toast({
        title: "Form deleted",
        description: "The form has been successfully deleted.",
      });
    } else {
      toast({
        title: "Error",
        description: "Failed to delete the form. Please try again.",
        variant: "destructive",
      });
    }
  };

  if (forms.length === 0) {
    return (
      <Card>
        <CardContent className="flex flex-col items-center justify-center py-8">
          <p className="text-muted-foreground mb-4">No forms created yet</p>
          <Button asChild>
            <Link href="/forms/new">Create your first form</Link>
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {forms.map((form) => (
        <Card key={form.id}>
          <CardHeader>
            <CardTitle>{form.title}</CardTitle>
            <CardDescription>
              Created {new Date(form.createdAt).toLocaleDateString()}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" size="sm" asChild>
                <Link href={`/forms/${form.id}/preview`}>
                  <Eye className="h-4 w-4 mr-1" />
                  Preview
                </Link>
              </Button>
              <Button variant="outline" size="sm" asChild>
                <Link href={`/forms/${form.id}/edit`}>
                  <Edit2 className="h-4 w-4 mr-1" />
                  Edit
                </Link>
              </Button>
              <Button
                variant="destructive"
                size="sm"
                onClick={() => handleDelete(form.id)}
              >
                <Trash2 className="h-4 w-4 mr-1" />
                Delete
              </Button>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

================
File: components/dashboard/Forms/RecentForms.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowRight } from "lucide-react";
import { useFormList } from "@/hooks/useFormLists";

export function RecentForms() {
  const { forms } = useFormList();
  const recentForms = forms.slice(0, 5); // Show only 5 most recent forms

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Recent Forms</CardTitle>
        <Button variant="ghost" size="sm" asChild>
          <Link href="/forms">
            View all
            <ArrowRight className="ml-2 h-4 w-4" />
          </Link>
        </Button>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {recentForms.length === 0 ? (
            <p className="text-sm text-muted-foreground">
              No forms created yet
            </p>
          ) : (
            recentForms.map((form) => (
              <div
                key={form.id}
                className="flex items-center justify-between py-2"
              >
                <div>
                  <p className="text-sm font-medium">{form.title}</p>
                  <p className="text-sm text-muted-foreground">
                    Created {new Date(form.createdAt).toLocaleDateString()}
                  </p>
                </div>
                <Button variant="ghost" size="sm" asChild>
                  <Link href={`/forms/${form.id}/edit`}>Edit</Link>
                </Button>
              </div>
            ))
          )}
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/MedicalQuestionnaire/MedicalQuestionnaire.tsx
================
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import React from "react";
import { CustomFormData } from "@/app/test/page";
import {
  ListQuestion,
  MultipleChoiceQuestion,
  ParagraphQuestion,
  SelectQuestion,
  TextQuestion,
} from "./QuestionTypes";

const steps = [
  {
    title: "Información Personal",
    questions: [
      { id: "name", title: "Nombre", type: "TEXT" },
      { id: "age", title: "Edad", type: "TEXT" },
      { id: "weight", title: "Peso", type: "TEXT" },
      { id: "room", title: "Habitación", type: "TEXT" },
    ],
  },
  {
    title: "Condiciones Médicas",
    questions: [
      {
        id: "heart",
        title:
          "¿Le han dicho que padece o sufre alguna enfermedad del corazón?",
        type: "LIST",
      },
      {
        id: "angina",
        title: "¿Ha sufrido o sufre de angina de pecho o infarto de miocardio?",
        type: "LIST",
      },
      {
        id: "dyspnea",
        title:
          "¿Se despertó alguna vez con sensación de falta de aire o necesitó variar la almohada para dormir?",
        type: "LIST",
      },
      {
        id: "stairs",
        title:
          "¿Se agita exageradamente al subir escaleras?, ¿Realiza poca actividad física?",
        type: "LIST",
      },
      {
        id: "hypertension",
        title:
          "¿Ha sufrido o sufre de hipertensión arterial? ¿Toma algún medicamento?",
        type: "LIST",
      },
      {
        id: "lungDisease",
        title:
          "¿Ha sufrido alguna enfermedad pulmonar prolongada (asma/bronquitis)?",
        type: "LIST",
      },
      {
        id: "smoking",
        title: "¿Fuma? ¿Desde qué edad? ... N° de cigarrillos ... /día",
        type: "LIST",
      },
      {
        id: "cough",
        title: "¿Tose habitualmente? ¿Con o sin catarro?",
        type: "LIST",
      },
      {
        id: "corticosteroids",
        title: "¿Ha sufrido o está recibiendo corticoides?",
        type: "LIST",
      },
      { id: "diabetes", title: "¿Sabe si tiene diabetes?", type: "LIST" },
      {
        id: "thyroid",
        title: "¿Ha tenido problemas de tiroides?",
        type: "LIST",
      },
      {
        id: "hepatitis",
        title: "¿Ha sufrido o tiene algún familiar con hepatitis?",
        type: "LIST",
      },
      {
        id: "alcohol",
        title: "¿Bebe alcohol? ¿Qué tipo y con qué frecuencia?",
        type: "LIST",
      },
      { id: "allergies", title: "¿Sufre alergias? ¿A qué?", type: "LIST" },
      {
        id: "weightLoss",
        title: "¿Ha perdido peso? ¿Cuántos Kg. y en cuánto tiempo?",
        type: "LIST",
      },
      {
        id: "renalDisease",
        title: "¿Padece alguna enfermedad renal?",
        type: "LIST",
      },
      {
        id: "seizures",
        title: "¿Ha tenido alguna vez convulsiones o epilepsia?",
        type: "LIST",
      },
      {
        id: "headaches",
        title: "¿Tiene habitualmente dolores de cabeza? ¿Toma aspirina?",
        type: "LIST",
      },
      {
        id: "bleeding",
        title: "¿Sangra con facilidad o se le forman moretones fácilmente?",
        type: "LIST",
      },
      {
        id: "surgeries",
        title:
          "¿Ha sido sometido a cirugías anteriores y qué tipo de anestesia recibió?",
        type: "LIST",
      },
      {
        id: "dentalProsthesis",
        title: "¿Utiliza prótesis dentales? ¿tiene dientes flojos?",
        type: "LIST",
      },
      {
        id: "medications",
        title: "Actualmente ¿Toma algún medicamento?",
        type: "LIST",
      },
      {
        id: "pregnancy",
        title: "Si es mujer ¿Sospecha estar embarazada?",
        type: "LIST",
      },
      {
        id: "arthritis",
        title: "¿Padece o padeció artrosis, debilidad muscular o osteoporosis?",
        type: "LIST",
      },
      {
        id: "sleep",
        title:
          "¿Le cuesta conciliar el sueño? ¿Toma algún medicamento para dormir?",
        type: "LIST",
      },
      // Add more questions as needed
    ],
  },
  {
    title: "Examen Físico",
    questions: [
      { id: "mouthOpening", title: "Apertura bucal", type: "TEXT" },
      {
        id: "mallampati",
        title: "Mallampati",
        type: "SELECT",
        options: ["1", "2", "3", "4"],
      },
      {
        id: "cervicalMobility",
        title: "Movilidad cervical",
        type: "SELECT",
        options: ["Normal", "Limitada", "Muy limitada"],
      },
      {
        id: "thyromentalDistance",
        title: "Distancia tiromentoniana",
        type: "TEXT",
      },
      {
        id: "jugularVeins",
        title: "Venas yugulares",
        type: "SELECT",
        options: ["Ingurgitadas", "Visibles", "No visibles"],
      },
      {
        id: "venousAccess",
        title: "Accesos venosos",
        type: "SELECT",
        options: ["Fácil", "Difícil", "Muy difícil"],
      },
      // add a multiple choice type question
      {
        id: "multipleChoiceQuestion",
        title: "Pregunta de opción múltiple",
        type: "MULTIPLE_CHOICE",
        options: ["Opción 1", "Opción 2", "Opción 3", "Opción 4"],
      },
    ],
  },
  {
    title: "Laboratorio",
    questions: [
      { id: "hto", title: "Hto", type: "TEXT" },
      { id: "hb", title: "Hb", type: "TEXT" },
      { id: "platelets", title: "Plaquetas", type: "TEXT" },
      { id: "glucose", title: "Glucemia", type: "TEXT" },
      { id: "na", title: "Na+", type: "TEXT" },
      { id: "k", title: "K+", type: "TEXT" },
      { id: "others", title: "Otros", type: "PARAGRAPH_TEXT" },
    ],
  },
  // Additional steps like ECG and Consent can be added similarly
];

export function MedicalQuestionnaire({ propSteps }) {
  console.log(propSteps);
  const [step, setStep] = React.useState(0);

  const questionaireSteps = propSteps ? propSteps : steps;

  const totalSteps = questionaireSteps.length;
  const router = useRouter();

  const [answers, setAnswers] = React.useState<{ [key: string]: any }>(() => {
    // Initialize answers with all questions set to "not selected"
    const initialAnswers: { [key: string]: any } = {};
    questionaireSteps.forEach((step) => {
      step.questions.forEach((question) => {
        initialAnswers[question.id] = "not selected";
      });
    });
    return initialAnswers;
  });
  const [submittedDataJson, setSubmittedDataJson] = React.useState<
    string | null
  >(null);
  const [submittedData, setSubmittedData] =
    React.useState<CustomFormData | null>(null);

  const handleNext = () => {
    if (step < totalSteps - 1) setStep(step + 1);
  };

  const handlePrevious = () => {
    if (step > 0) setStep(step - 1);
  };

  const handleSubmit = () => {
    // Map the answers to match the desired structure
    const formattedData: CustomFormData = {
      header: {
        title: "EVALUACIÓN PREANESTÉSICA",
        subtitle1: "PROVINCIA DE CORRIENTES",
        subtitle2: "Servicio de Cirugía miniinvasiva",
      },
      patientInfo: {
        name: answers.name,
        age: answers.age,
        weight: answers.weight,
        room: answers.room,
      },
      questions: questionaireSteps[1].questions.map((q: any) => ({
        question: q.title,
        answer: answers[q.id] === "not selected" ? null : answers[q.id],
      })),
      physicalExam: {
        mouthOpening: answers.mouthOpening,
        mallampati: answers.mallampati,
        cervicalMobility: answers.cervicalMobility,
        thyromentalDistance: answers.thyromentalDistance,
        jugularVeins: answers.jugularVeins,
        venousAccess: answers.venousAccess,
      },
      labResults: {
        hto: answers.hto,
        hb: answers.hb,
        platelets: answers.platelets,
        glucose: answers.glucose,
        na: answers.na,
        k: answers.k,
        others: answers.others,
      },
      ecg: {
        rhythm: "Sinusal", // This can be updated to collect from the form
        cardiovascularRisk: "Bajo", // This can be updated to collect from the form
      },
      consentText: [
        "Yo, ................................................., o en su defecto yo, ................................................., en carácter de testigo autorizo a que mi médico, luego de evaluar los inconvenientes eventuales y beneficios de la internación, estudios, tratamientos y/o intervención quirúrgica me efectúe.",
        "Asumiendo voluntariamente y conscientemente los riesgos propios del mismo, los cuales me fueron explicados detalladamente.",
        "Declaro haber sido informado de padecer .................................................. diagnóstico al que se arribó por medio de la evaluación clínica y los estudios complementarios. Consiento además en la administración de los anestésicos que sean considerados necesarios o convenientes por el médico responsable comprendiendo que ello puede implicar riesgos - Aclaro que he leído y entendido cada párrafo de esta autorización.",
      ],
    };
    console.log("Submitted data:", formattedData);
    setSubmittedDataJson(JSON.stringify(formattedData, null, 2));
    setSubmittedData(formattedData);

    //redirect to /summary with all the data on params

    //use the router sintax of next/navigation

    router.push(
      "/summary" + "?a=" + `${JSON.stringify(formattedData, null, 2)}`
    );
  };

  const renderQuestion = (question: any) => {
    const value = answers[question.id];
    const onChange = (newValue: any) =>
      setAnswers((prevAnswers) => ({
        ...prevAnswers,
        [question.id]: newValue,
      }));

    switch (question.type) {
      case "TEXT":
        return (
          <TextQuestion
            key={question.id}
            question={question}
            value={value}
            onChange={onChange}
          />
        );
      case "LIST":
        return (
          <ListQuestion
            key={question.id}
            question={question}
            value={value}
            onChange={onChange}
          />
        );
      case "MULTIPLE_CHOICE":
        return (
          <MultipleChoiceQuestion
            key={question.id}
            question={question}
            value={value}
            onChange={onChange}
          />
        );
      case "PARAGRAPH_TEXT":
        return (
          <ParagraphQuestion
            key={question.id}
            question={question}
            value={value}
            onChange={onChange}
          />
        );
      case "SELECT":
        return (
          <SelectQuestion
            key={question.id}
            question={question}
            value={value}
            onChange={onChange}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-4">
      {!submittedData ? (
        <div className="mx-auto max-w-2xl">
          <Card className="shadow-lg border-0">
            <CardContent className="p-6 overflow-y-scroll h-[75vh]">
              <div className="flex flex-col justify-center items-start ">
                <h1 className="text-3xl font-bold text-gray-900 text-center mb-2">
                  {questionaireSteps[step].title}
                </h1>
                <div className="">
                  <div className="text-1xl font-bold text-gray-900 text-center mb-2">
                    <span className="inline-block bg-indigo-600 text-white px-3 py-1 rounded-full">
                      Paso {step + 1} de {totalSteps}
                    </span>
                  </div>
                </div>
              </div>
              <div className="grid gap-6">
                {questionaireSteps[step].questions.map((question, index) => (
                  <div
                    key={question.id}
                    className=" bg-white rounded-lg transition-shadow duration-200"
                  >
                    {renderQuestion(question)}
                  </div>
                ))}
              </div>
            </CardContent>

            <CardFooter className="flex justify-between p-6 bg-gray-50">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={step === 0}
                className="border-2 hover:bg-gray-100"
              >
                <ChevronLeft className="mr-2 h-4 w-4" />
                Anterior
              </Button>
              <Button
                onClick={step === totalSteps - 1 ? handleSubmit : handleNext}
                className="bg-indigo-600 hover:bg-indigo-700 text-white"
              >
                {step === totalSteps - 1 ? (
                  "Enviar"
                ) : (
                  <>
                    Siguiente
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </div>
      ) : (
        <></>
        // <div className="mx-auto max-w-6xl">
        //   <div className="mt-8 p-4 bg-white shadow rounded">
        //     <Result formData={submittedData} />
        //     {/* <pre className="whitespace-pre-wrap">{submittedDataJson}</pre> */}
        //   </div>
        // </div>
      )}
      {/* 
          {submittedData && (
          )} */}
    </div>
  );
}

================
File: components/MedicalQuestionnaire/QuestionTypes.tsx
================
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup } from "@/components/ui/radio-group";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import React from "react";

export interface QuestionProps {
  question: {
    id: string;
    title: string;
    type: string;
    options?: string[];
  };
  value: any;
  onChange: (value: any) => void;
}

export const TextQuestion: React.FC<QuestionProps> = ({
  question,
  value,
  onChange,
}) => (
  <div className="space-y-2">
    <Label htmlFor={question.id} className="text-gray-700 font-medium text-lg">
      {question.title}
    </Label>
    <Input
      id={question.id}
      placeholder={question.title}
      className="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
      value={value === "not selected" ? "" : value}
      onChange={(e) => onChange(e.target.value)}
    />
  </div>
);

export const ListQuestion: React.FC<QuestionProps> = ({
  question,
  value,
  onChange,
}) => (
  <div className="space-y-3">
    <Label className="text-gray-700 font-medium text-lg">
      {question.title}
    </Label>
    <RadioGroup
      value={value === "not selected" ? "" : value}
      onValueChange={onChange}
      className="grid grid-cols-2 gap-4"
    >
      <div
        className={`flex items-center justify-center space-x-2 p-2 rounded-lg transition-colors cursor-pointer ${
          value === "Sí" ? "bg-indigo-500 text-white" : "bg-gray-100"
        }`}
        onClick={() => onChange("Sí")}
      >
        <Label
          htmlFor={`${question.id}-yes`}
          className="cursor-pointer text-lg"
        >
          Sí
        </Label>
      </div>
      <div
        className={`flex items-center justify-center space-x-2 p-2 rounded-lg transition-colors cursor-pointer ${
          value === "No" ? "bg-indigo-500 text-white" : "bg-gray-100"
        }`}
        onClick={() => onChange("No")}
      >
        <Label htmlFor={`${question.id}-no`} className="cursor-pointer text-lg">
          No
        </Label>
      </div>
    </RadioGroup>
  </div>
);

export const MultipleChoiceQuestion: React.FC<QuestionProps> = ({
  question,
  value,
  onChange,
}) => (
  <div className="space-y-3">
    <Label className="text-gray-700 font-medium text-lg">
      {question.title}
    </Label>
    <div className="grid grid-cols-2 gap-3">
      {question.options?.map((option, index) => {
        const selectedValues = value === "not selected" ? [] : value;
        const isChecked = selectedValues.includes(option);
        const handleToggle = () => {
          if (isChecked) {
            onChange(selectedValues.filter((v: string) => v !== option));
          } else {
            onChange([...selectedValues, option]);
          }
        };
        return (
          <div
            key={index}
            className="flex items-center space-x-2 bg-gray-50 p-3 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
            onClick={handleToggle}
          >
            <Checkbox
              id={`${question.id}-option${index}`}
              checked={isChecked}
            />
            <div className="cursor-pointer text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              {option}
            </div>
          </div>
        );
      })}
    </div>
  </div>
);

export const ParagraphQuestion: React.FC<QuestionProps> = ({
  question,
  value,
  onChange,
}) => (
  <div className="space-y-2">
    <Label htmlFor={question.id} className="text-gray-700 font-medium text-lg">
      {question.title}
    </Label>
    <Textarea
      id={question.id}
      placeholder={question.title}
      className="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
      value={value === "not selected" ? "" : value}
      onChange={(e) => onChange(e.target.value)}
    />
  </div>
);

export const SelectQuestion: React.FC<QuestionProps> = ({
  question,
  value,
  onChange,
}) => (
  <div className="space-y-2">
    <Label htmlFor={question.id} className="text-gray-700 font-medium text-lg">
      {question.title}
    </Label>
    <Select
      value={value === "not selected" ? "" : value}
      onValueChange={onChange}
    >
      <SelectTrigger
        id={question.id}
        className="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
      >
        <SelectValue placeholder="Seleccionar opción" />
      </SelectTrigger>
      <SelectContent>
        {question.options?.map((option, index) => (
          <SelectItem key={index} value={option} className="h-12">
            {option}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  </div>
);

================
File: components/summary/AvailableItemsPanel.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";

interface AvailableItemsPanelProps {
  formData: any;
  layout: any[];
  setLayout: (layout: any[]) => void;
  onLayoutChange?: (layout: any[]) => void;
}

export function AvailableItemsPanel({
  formData,
  layout,
  setLayout,
  onLayoutChange,
}: AvailableItemsPanelProps) {
  const handleDragEnd = (result: any) => {
    const { source, destination, draggableId } = result;

    if (!destination) return;

    if (source.droppableId === "available-items") {
      const questionItem = formData.form.steps
        .flatMap((step: any) => step.questions)
        .find((q: any) => q.id === draggableId);

      if (!questionItem) return;

      const newItem = {
        id: `${draggableId}-${Date.now()}`,
        type: "text",
        title: questionItem.title,
        questionId: questionItem.id,
        value: formData.responses[questionItem.id],
        width: 1,
      };

      const updatedLayout = layout.map((section: any) => {
        if (section.id === destination.droppableId) {
          const newItems = Array.from(section.items);
          newItems.splice(destination.index, 0, newItem);
          return { ...section, items: newItems };
        }
        return section;
      });

      setLayout(updatedLayout);
      onLayoutChange && onLayoutChange(updatedLayout);
      return;
    }

    if (source.droppableId === destination.droppableId) {
      const section = layout.find((s) => s.id === source.droppableId);
      if (!section) return;

      const newItems = Array.from(section.items);
      const [removed] = newItems.splice(source.index, 1);
      newItems.splice(destination.index, 0, removed);

      const newLayout = layout.map((s) =>
        s.id === source.droppableId ? { ...s, items: newItems } : s
      );

      setLayout(newLayout);
      onLayoutChange && onLayoutChange(newLayout);
    } else {
      const sourceSection = layout.find((s) => s.id === source.droppableId);
      const destSection = layout.find((s) => s.id === destination.droppableId);
      if (!sourceSection || !destSection) return;

      const sourceItems = Array.from(sourceSection.items);
      const destItems = Array.from(destSection.items);
      const [removed] = sourceItems.splice(source.index, 1);
      destItems.splice(destination.index, 0, removed);

      const newLayout = layout.map((section) => {
        if (section.id === source.droppableId) {
          return { ...section, items: sourceItems };
        }
        if (section.id === destination.droppableId) {
          return { ...section, items: destItems };
        }
        return section;
      });

      setLayout(newLayout);
      onLayoutChange && onLayoutChange(newLayout);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Available Items</CardTitle>
      </CardHeader>
      <CardContent>
        <Droppable droppableId="available-items" isDropDisabled={false}>
          {(provided, snapshot) => (
            <div
              {...provided.droppableProps}
              ref={provided.innerRef}
              className={`space-y-4 ${
                snapshot.isDraggingOver ? "bg-muted/50" : ""
              }`}
            >
              {formData.form.steps.map((step: any, stepIndex: number) => (
                <div key={step.title} className="space-y-2">
                  <h3 className="font-semibold text-sm text-muted-foreground">
                    {step.title}
                  </h3>
                  <div className="space-y-2">
                    {step.questions.map((question: any, index: number) => (
                      <Draggable
                        key={question.id}
                        draggableId={question.id}
                        index={stepIndex * 100 + index}
                      >
                        {(provided, snapshot) => (
                          <div
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            className={`p-2 bg-secondary rounded-md cursor-move
                              ${
                                snapshot.isDragging
                                  ? "ring-2 ring-primary shadow-lg"
                                  : ""
                              }`}
                          >
                            <p className="text-sm font-medium">
                              {question.title}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {formData.responses[question.id]}
                            </p>
                          </div>
                        )}
                      </Draggable>
                    ))}
                  </div>
                </div>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </CardContent>
    </Card>
  );
}

================
File: components/summary/items/SummaryItems.tsx
================
// src/components/summary/items/SummaryItems.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface SummaryItemProps {
  title: string;
  value: any;
  type?: "text" | "metric" | "chart";
  style?: any;
  className?: string;
}

// Different display components for different types of data
export function TextItem({ title, value, style, className }: SummaryItemProps) {
  return (
    <div className={cn("space-y-1", className)} style={style}>
      <h4 className="text-sm font-medium text-muted-foreground">{title}</h4>
      <p className="text-lg font-medium">{value}</p>
    </div>
  );
}

export function MetricItem({
  title,
  value,
  style,
  className,
}: SummaryItemProps) {
  return (
    <Card className={cn("", className)} style={style}>
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
      </CardContent>
    </Card>
  );
}

// Style presets that can be applied to any item
export const STYLE_PRESETS = {
  default: {
    name: "Default",
    styles: {
      text: {
        className: "bg-white p-4 rounded-lg shadow-sm",
      },
      metric: {
        className: "bg-white",
      },
    },
  },
  minimal: {
    name: "Minimal",
    styles: {
      text: {
        className: "p-2",
      },
      metric: {
        className: "border-none shadow-none",
      },
    },
  },
  bordered: {
    name: "Bordered",
    styles: {
      text: {
        className: "border-2 border-gray-200 p-4 rounded-lg",
      },
      metric: {
        className: "border-2 border-gray-200",
      },
    },
  },
  colorful: {
    name: "Colorful",
    styles: {
      text: {
        className: "bg-blue-50 p-4 rounded-lg text-blue-900",
      },
      metric: {
        className: "bg-blue-50 text-blue-900",
      },
    },
  },
};

// Helper function to get dummy data for preview
export function getDummyValue(type: string): any {
  const dummyData = {
    name: ["John Doe", "Jane Smith", "Robert Johnson"],
    age: [25, 35, 45, 55],
    weight: [70, 75, 80, 85],
    bloodPressure: ["120/80", "130/85", "125/82"],
    temperature: [36.5, 36.8, 37.0],
    pulse: [72, 75, 80],
    text: ["Normal", "Stable", "Good"],
  };

  const category = type.toLowerCase();
  const dataArray =
    dummyData[category as keyof typeof dummyData] || dummyData.text;
  return dataArray[Math.floor(Math.random() * dataArray.length)];
}

================
File: components/summary/SummaryLayoutEditor.tsx
================
// src/components/summary/SummaryLayoutEditor.tsx
import { useState } from "react";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Grid, LayoutGrid } from "lucide-react";
import { AvailableItemsPanel } from "./AvailableItemsPanel";

interface LayoutConfig {
  id: string;
  type: "section";
  title: string;
  columns: number;
  items: SummaryItem[];
}

interface SummaryItem {
  id: string;
  type: "text" | "metric" | "chart";
  title: string;
  value: any;
  width: number;
  questionId: string;
}

const LAYOUT_PRESETS = {
  classic: {
    name: "Classic Report",
    config: [
      {
        id: "header",
        type: "section",
        title: "Patient Information",
        columns: 2,
        items: [],
      },
      {
        id: "vitals",
        type: "section",
        title: "Vital Signs",
        columns: 3,
        items: [],
      },
      {
        id: "details",
        type: "section",
        title: "Medical Details",
        columns: 1,
        items: [],
      },
    ],
  },
  modern: {
    name: "Modern Dashboard",
    config: [
      {
        id: "header",
        type: "section",
        title: "Overview",
        columns: 3,
        items: [],
      },
      { id: "main", type: "section", title: "Details", columns: 2, items: [] },
    ],
  },
  compact: {
    name: "Compact View",
    config: [
      { id: "all", type: "section", title: "Summary", columns: 1, items: [] },
    ],
  },
};

export function SummaryLayoutEditor({
  formData,
  onLayoutChange,
}: {
  formData: any;
  onLayoutChange: (layout: LayoutConfig[]) => void;
}) {
  const [layout, setLayout] = useState<LayoutConfig[]>(
    LAYOUT_PRESETS.classic.config
  );
  const [activePreset, setActivePreset] = useState<string>("classic");

  const handleDragEnd = (result: any) => {
    const { source, destination, draggableId } = result;

    if (!destination) return;

    // Handle dragging from available items panel
    if (source.droppableId === "available-items") {
      const questionItem = formData.form.steps
        .flatMap((step: any) => step.questions)
        .find((q: any) => q.id === draggableId);

      if (!questionItem) return;

      // Create new summary item from question
      const newItem: SummaryItem = {
        id: `${draggableId}-${Date.now()}`,
        type: "text",
        title: questionItem.title,
        questionId: questionItem.id,
        value: formData.responses[questionItem.id],
        width: 1,
      };

      // Add to destination section
      const updatedLayout = layout.map((section) => {
        if (section.id === destination.droppableId) {
          const newItems = Array.from(section.items);
          newItems.splice(destination.index, 0, newItem);
          return { ...section, items: newItems };
        }
        return section;
      });

      setLayout(updatedLayout);
      onLayoutChange(updatedLayout);
      return;
    }

    // Handle reordering within and between sections
    const sourceSection = layout.find((s) => s.id === source.droppableId);
    const destSection = layout.find((s) => s.id === destination.droppableId);

    if (!sourceSection || !destSection) return;

    const newLayout = [...layout];

    // Moving within same section
    if (source.droppableId === destination.droppableId) {
      const items = Array.from(sourceSection.items);
      const [removed] = items.splice(source.index, 1);
      items.splice(destination.index, 0, removed);

      const sectionIndex = layout.findIndex((s) => s.id === source.droppableId);
      newLayout[sectionIndex] = { ...sourceSection, items };
    } else {
      // Moving between sections
      const sourceItems = Array.from(sourceSection.items);
      const destItems = Array.from(destSection.items);
      const [removed] = sourceItems.splice(source.index, 1);
      destItems.splice(destination.index, 0, removed);

      const sourceIndex = layout.findIndex((s) => s.id === source.droppableId);
      const destIndex = layout.findIndex(
        (s) => s.id === destination.droppableId
      );

      newLayout[sourceIndex] = { ...sourceSection, items: sourceItems };
      newLayout[destIndex] = { ...destSection, items: destItems };
    }

    setLayout(newLayout);
    onLayoutChange(newLayout);
  };

  const handlePresetChange = (preset: string) => {
    setActivePreset(preset);
    const newLayout =
      LAYOUT_PRESETS[preset as keyof typeof LAYOUT_PRESETS].config;
    setLayout(newLayout);
    onLayoutChange(newLayout);
  };

  const handleColumnChange = (sectionId: string, columns: number) => {
    const newLayout = layout.map((section) =>
      section.id === sectionId ? { ...section, columns } : section
    );
    setLayout(newLayout);
    onLayoutChange(newLayout);
  };

  const handleAddSection = () => {
    const newSection: LayoutConfig = {
      id: `section-${Date.now()}`,
      type: "section",
      title: "New Section",
      columns: 1,
      items: [],
    };
    const newLayout = [...layout, newSection];
    setLayout(newLayout);
    onLayoutChange(newLayout);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <Select value={activePreset} onValueChange={handlePresetChange}>
          <SelectTrigger className="w-[200px]">
            <SelectValue placeholder="Select layout" />
          </SelectTrigger>
          <SelectContent>
            {Object.entries(LAYOUT_PRESETS).map(([key, preset]) => (
              <SelectItem key={key} value={key}>
                {preset.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Button onClick={handleAddSection} variant="outline">
          <LayoutGrid className="w-4 h-4 mr-2" />
          Add Section
        </Button>
      </div>

      <div className="grid grid-cols-6 gap-6">
        <div className="col-span-4">
          <DragDropContext onDragEnd={handleDragEnd}>
            {layout.map((section) => (
              <Card key={section.id} className="mb-4">
                <CardHeader className="flex flex-row items-center justify-between">
                  <CardTitle>{section.title}</CardTitle>
                  <Select
                    value={section.columns.toString()}
                    onValueChange={(value) =>
                      handleColumnChange(section.id, parseInt(value))
                    }
                  >
                    <SelectTrigger className="w-[100px]">
                      <SelectValue placeholder="Columns" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 4].map((num) => (
                        <SelectItem key={num} value={num.toString()}>
                          {num} {num === 1 ? "Column" : "Columns"}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </CardHeader>
                <CardContent>
                  <Droppable droppableId={section.id} direction="horizontal">
                    {(provided, snapshot) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className={`grid gap-4 grid-cols-${
                          section.columns
                        } min-h-[100px]
                          ${snapshot.isDraggingOver ? "bg-muted/50" : ""}`}
                      >
                        {section.items.map((item, index) => (
                          <Draggable
                            key={item.id}
                            draggableId={item.id}
                            index={index}
                          >
                            {(provided, snapshot) => (
                              <div
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                className={`p-4 rounded-lg border
                                  ${
                                    snapshot.isDragging
                                      ? "bg-accent"
                                      : "bg-card"
                                  }`}
                              >
                                <h3 className="font-medium">{item.title}</h3>
                                <p className="text-sm text-muted-foreground">
                                  {formData.responses[item.questionId]}
                                </p>
                              </div>
                            )}
                          </Draggable>
                        ))}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                </CardContent>
              </Card>
            ))}
          </DragDropContext>
        </div>
        <div className="col-span-2">
          <AvailableItemsPanel
            formData={formData}
            layout={layout}
            setLayout={setLayout}
            onLayoutChange={onLayoutChange}
          />
        </div>
      </div>
    </div>
  );
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: components/ui/input.tsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-14 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/resizable.tsx
================
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-14 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: hooks/useFormLists.tsx
================
// src/hooks/forms/useFormList.ts
import { useEffect, useState, useCallback } from "react";

interface Form {
  id: string;
  title: string;
  description?: string;
  steps: FormStep[];
  createdAt: Date;
  updatedAt: Date;
  isPublished: boolean;
  createdBy: string;
}

interface FormStep {
  id: string;
  title: string;
  order: number;
  questions: Question[];
}

interface Question {
  id: string;
  title: string;
  type: QuestionType;
  options?: string[];
  required: boolean;
  order: number;
}

type QuestionType =
  | "TEXT"
  | "LIST"
  | "MULTIPLE_CHOICE"
  | "PARAGRAPH_TEXT"
  | "SELECT";

const FORMS_STORAGE_KEY = "medical_forms";

export function useFormList() {
  const [forms, setForms] = useState<Form[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  // Load forms from localStorage on mount
  useEffect(() => {
    try {
      const storedForms = localStorage.getItem(FORMS_STORAGE_KEY);
      if (storedForms) {
        // Parse dates properly from JSON
        const parsedForms = JSON.parse(storedForms, (key, value) => {
          if (key === "createdAt" || key === "updatedAt") {
            return new Date(value);
          }
          return value;
        });
        setForms(parsedForms);
      }
    } catch (err) {
      setError(err instanceof Error ? err : new Error("Failed to load forms"));
    } finally {
      setLoading(false);
    }
  }, []);

  // Save forms to localStorage whenever they change
  useEffect(() => {
    if (!loading) {
      try {
        localStorage.setItem(FORMS_STORAGE_KEY, JSON.stringify(forms));
      } catch (err) {
        setError(
          err instanceof Error ? err : new Error("Failed to save forms")
        );
      }
    }
  }, [forms, loading]);

  const createForm = useCallback(
    (formData: Omit<Form, "id" | "createdAt" | "updatedAt">) => {
      const newForm: Form = {
        ...formData,
        id: crypto.randomUUID(),
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      setForms((prev) => [...prev, newForm]);
      return newForm;
    },
    []
  );

  const updateForm = useCallback((id: string, updates: Partial<Form>) => {
    setForms((prev) => {
      const index = prev.findIndex((form) => form.id === id);
      if (index === -1) return prev;

      const updatedForms = [...prev];
      updatedForms[index] = {
        ...updatedForms[index],
        ...updates,
        updatedAt: new Date(),
      };

      return updatedForms;
    });
    // The useEffect in useFormList will handle the localStorage save
    return true;
  }, []);

  const deleteForm = useCallback((id: string) => {
    setForms((prev) => prev.filter((form) => form.id !== id));
    return true;
  }, []);

  const getFormById = useCallback(
    (id: string) => {
      return forms.find((form) => form.id === id) || null;
    },
    [forms]
  );

  const publishForm = useCallback(
    (id: string) => {
      updateForm(id, { isPublished: true });
    },
    [updateForm]
  );

  const unpublishForm = useCallback(
    (id: string) => {
      updateForm(id, { isPublished: false });
    },
    [updateForm]
  );

  // Get recent forms - useful for dashboard
  const getRecentForms = useCallback(
    (limit: number = 5) => {
      return [...forms]
        .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())
        .slice(0, limit);
    },
    [forms]
  );

  // Get form statistics
  const getFormStats = useCallback(() => {
    const total = forms.length;
    const published = forms.filter((f) => f.isPublished).length;
    const drafts = total - published;

    return {
      total,
      published,
      drafts,
    };
  }, [forms]);

  return {
    forms,
    loading,
    error,
    createForm,
    updateForm,
    deleteForm,
    getFormById,
    publishForm,
    unpublishForm,
    getRecentForms,
    getFormStats,
  };
}

// Example usage:
/*
function FormComponent() {
  const { 
    forms, 
    loading, 
    createForm, 
    updateForm, 
    deleteForm,
    getFormStats
  } = useFormList();

  if (loading) return <div>Loading...</div>;

  const handleCreateForm = () => {
    const newForm = createForm({
      title: "New Form",
      description: "Form description",
      steps: [],
      isPublished: false,
      createdBy: "user123"
    });
    console.log("Created form:", newForm);
  };

  const stats = getFormStats();
  console.log("Form stats:", stats);

  return (
    <div>
      <button onClick={handleCreateForm}>Create New Form</button>
      {forms.map(form => (
        <div key={form.id}>
          <h3>{form.title}</h3>
          <button onClick={() => updateForm(form.id, { title: "Updated Title" })}>
            Update
          </button>
          <button onClick={() => deleteForm(form.id)}>
            Delete
          </button>
        </div>
      ))}
    </div>
  );
}
*/

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "anestesia",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hello-pangea/dnd": "^17.0.0",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.5.1",
    "html2pdf.js": "^0.10.2",
    "input-otp": "^1.4.1",
    "jspdf": "^2.5.2",
    "lucide-react": "^0.468.0",
    "next": "15.0.3",
    "next-themes": "^0.4.3",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.53.2",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.14.1",
    "sonner": "^1.7.0",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
